{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4","program":"/home/oleg/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","simba","--edition=2018","/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"std\"","-C","metadata=55e33333899865d5","-C","extra-filename=-55e33333899865d5","--out-dir","/home/oleg/Documents/dev/galaga/src/target/rls/debug/deps","-L","dependency=/home/oleg/Documents/dev/galaga/src/target/rls/debug/deps","--extern","approx=/home/oleg/Documents/dev/galaga/src/target/rls/debug/deps/libapprox-ae346aae61f4dbf0.rmeta","--extern","num_complex=/home/oleg/Documents/dev/galaga/src/target/rls/debug/deps/libnum_complex-0b79d1c4263add0f.rmeta","--extern","num_traits=/home/oleg/Documents/dev/galaga/src/target/rls/debug/deps/libnum_traits-15186f8f9f53c559.rmeta","--extern","paste=/home/oleg/Documents/dev/galaga/src/target/rls/debug/deps/libpaste-0c9fb3b9a70f19e4.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/oleg/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/oleg/Documents/dev/galaga/src/target/rls/debug/deps/libsimba-55e33333899865d5.rmeta"},"prelude":{"crate_id":{"name":"simba","disambiguator":[1008031160235436825,10436780516471508302]},"crate_root":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src","external_crates":[{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12933703438800314702,5774803219644544316]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[18134888982608726624,15478788479473023395]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6673302632599048863,4691371433878452070]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11457885127507258025,479752930606968628]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6007655421670680970,17748288058820543149]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4051320655186846034,14773827427477085591]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3672675044024306215,7179779047398453100]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14739525726177289408,3061276640434149652]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2246841610299105657,12905561680815043912]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4036557704906104068,994131407893854156]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[7443407023664770875,11250036483448109314]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[10148669557414888454,6400214184476534778]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[4006540472161665961,15205760237192158299]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[16043199729901662453,7825522302763349882]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[5738570549504868290,14845130516100231771]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[6807687926185025542,9498922200428406688]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[6171827839412267364,4338689175470013405]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","num":18,"id":{"name":"num_traits","disambiguator":[11348060067260856026,14620577537453903898]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","num":19,"id":{"name":"approx","disambiguator":[8391902732824745655,14888329288371716252]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","num":20,"id":{"name":"num_complex","disambiguator":[2234435905665002869,3858055944766738801]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","num":21,"id":{"name":"paste","disambiguator":[17702991015953864323,17135768066532145297]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","num":22,"id":{"name":"proc_macro_hack","disambiguator":[18107074244595300940,7254669559897049488]}},{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","num":23,"id":{"name":"paste_impl","disambiguator":[18240303781103151534,11634139876387164469]}}],"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","byte_start":0,"byte_end":2030,"line_start":1,"line_end":42,"column_start":1,"column_end":14}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":72},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/mod.rs","byte_start":2107,"byte_end":2119,"line_start":3,"line_end":3,"column_start":24,"column_end":36},"alias_span":null,"name":"ComplexField","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":144},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/mod.rs","byte_start":2143,"byte_end":2152,"line_start":4,"line_end":4,"column_start":23,"column_end":32},"alias_span":null,"name":"ClosedAdd","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":150},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/mod.rs","byte_start":2154,"byte_end":2163,"line_start":4,"line_end":4,"column_start":34,"column_end":43},"alias_span":null,"name":"ClosedDiv","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":148},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/mod.rs","byte_start":2165,"byte_end":2174,"line_start":4,"line_end":4,"column_start":45,"column_end":54},"alias_span":null,"name":"ClosedMul","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":152},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/mod.rs","byte_start":2176,"byte_end":2185,"line_start":4,"line_end":4,"column_start":56,"column_end":65},"alias_span":null,"name":"ClosedNeg","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":146},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/mod.rs","byte_start":2187,"byte_end":2196,"line_start":4,"line_end":4,"column_start":67,"column_end":76},"alias_span":null,"name":"ClosedSub","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":167},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/mod.rs","byte_start":2198,"byte_end":2203,"line_start":4,"line_end":4,"column_start":78,"column_end":83},"alias_span":null,"name":"Field","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":28},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/mod.rs","byte_start":2303,"byte_end":2312,"line_start":7,"line_end":7,"column_start":21,"column_end":30},"alias_span":null,"name":"RealField","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":174},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/mod.rs","byte_start":2337,"byte_end":2345,"line_start":8,"line_end":8,"column_start":24,"column_end":32},"alias_span":null,"name":"SubsetOf","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":180},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/mod.rs","byte_start":2347,"byte_end":2357,"line_start":8,"line_end":8,"column_start":34,"column_end":44},"alias_span":null,"name":"SupersetOf","value":"","parent":{"krate":0,"index":4}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/mod.rs","byte_start":53520,"byte_end":53521,"line_start":3,"line_end":3,"column_start":31,"column_end":32},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":201}},{"kind":"Use","ref_id":{"krate":0,"index":394},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/mod.rs","byte_start":53615,"byte_end":53623,"line_start":6,"line_end":6,"column_start":26,"column_end":34},"alias_span":null,"name":"SimdBool","value":"","parent":{"krate":0,"index":201}},{"kind":"Use","ref_id":{"krate":0,"index":463},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/mod.rs","byte_start":53653,"byte_end":53669,"line_start":7,"line_end":7,"column_start":29,"column_end":45},"alias_span":null,"name":"SimdComplexField","value":"","parent":{"krate":0,"index":201}},{"kind":"Use","ref_id":{"krate":0,"index":525},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/mod.rs","byte_start":53698,"byte_end":53708,"line_start":8,"line_end":8,"column_start":28,"column_end":38},"alias_span":null,"name":"SimdOption","value":"","parent":{"krate":0,"index":201}},{"kind":"Use","ref_id":{"krate":0,"index":540},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/mod.rs","byte_start":53742,"byte_end":53756,"line_start":9,"line_end":9,"column_start":33,"column_end":47},"alias_span":null,"name":"SimdPartialOrd","value":"","parent":{"krate":0,"index":201}},{"kind":"Use","ref_id":{"krate":0,"index":571},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/mod.rs","byte_start":53783,"byte_end":53796,"line_start":10,"line_end":10,"column_start":26,"column_end":39},"alias_span":null,"name":"SimdRealField","value":"","parent":{"krate":0,"index":201}},{"kind":"Use","ref_id":{"krate":0,"index":613},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/mod.rs","byte_start":53825,"byte_end":53835,"line_start":11,"line_end":11,"column_start":28,"column_end":38},"alias_span":null,"name":"SimdSigned","value":"","parent":{"krate":0,"index":201}},{"kind":"Use","ref_id":{"krate":0,"index":642},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/mod.rs","byte_start":53864,"byte_end":53882,"line_start":12,"line_end":12,"column_start":28,"column_end":46},"alias_span":null,"name":"PrimitiveSimdValue","value":"","parent":{"krate":0,"index":201}},{"kind":"Use","ref_id":{"krate":0,"index":628},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/mod.rs","byte_start":53884,"byte_end":53893,"line_start":12,"line_end":12,"column_start":48,"column_end":57},"alias_span":null,"name":"SimdValue","value":"","parent":{"krate":0,"index":201}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","byte_start":0,"byte_end":2030,"line_start":1,"line_end":42,"column_start":1,"column_end":14},"name":"","qualname":"::","value":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":201}],"decl_id":null,"docs":"__Simba__ is a crate defining a set of trait for writing code that can be generic with regard to the\nnumber of lanes of the numeric input value. Those traits are implemented by `f32`, `u32`, `i16`,\n`bool` as well as SIMD types like `f32x4, u32x8, i16x2`, etc.","sig":null,"attributes":[{"value":"*\n__Simba__ is a crate defining a set of trait for writing code that can be generic with regard to the\nnumber of lanes of the numeric input value. Those traits are implemented by `f32`, `u32`, `i16`,\n`bool` as well as SIMD types like `f32x4, u32x8, i16x2`, etc.\n\nOne example of use-case applied by the [nalgebra crate](https://nalgebra.org) is to define generic methods\nlike vector normalization that will work for `Vector3<f32>` as well as `Vector3<f32x4>`.\n\nThis makes it easier leverage the power of [SIMD Array-of-Struct-of-Array (AoSoA)](https://www.rustsim.org/blog/2020/03/23/simd-aosoa-in-nalgebra/)\nwith less code duplication.\n\n\n## Cargo features\n\nTwo cargo features can be optionally enabled:\n- With the __`packed_simd`__ feature enabled, the `simba::simd` module will export several SIMD types like `f32x2`,\n `f64x4`, `i32i8`, `u16i16`, etc. There types are wrappers around the SIMD types from the [__packed_simd__\n crate](https://docs.rs/packed_simd). This requires a nightly compiler.\n- With the __`wide`__ feature enabled, the `simba::simd` module will export the `WideF32x4` and `WideBoolF32x4`\n  types. They types ure wrapper around the `wide::f32x4` type from the [__wide__ crate](https://docs.rs/wide).\n  This will work with both a stable or nightly compiler.\n\nIf none of those features are enabled, __simba__ will still define all the scalar and SIMD traits.\nHowever, the SIMD traits won't be implemented for any SIMD types. Therefore it is recommended to:\n- Use the `packed_simd` feature if you want more features, and can afford to use a nightly compiler.\n- Use the `wide` feature if you only need 4-lanes 32-bits floats, and can't afford to use a nightly compiler.\n*/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","byte_start":0,"byte_end":1691,"line_start":1,"line_end":27,"column_start":1,"column_end":3}},{"value":"deny(non_camel_case_types)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","byte_start":1693,"byte_end":1723,"line_start":29,"line_end":29,"column_start":1,"column_end":31}},{"value":"deny(unused_parens)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","byte_start":1724,"byte_end":1747,"line_start":30,"line_end":30,"column_start":1,"column_end":24}},{"value":"deny(non_upper_case_globals)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","byte_start":1748,"byte_end":1780,"line_start":31,"line_end":31,"column_start":1,"column_end":33}},{"value":"deny(unused_results)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","byte_start":1781,"byte_end":1805,"line_start":32,"line_end":32,"column_start":1,"column_end":25}},{"value":"deny(missing_docs)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","byte_start":1806,"byte_end":1828,"line_start":33,"line_end":33,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"scalar","qualname":"::scalar","value":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/mod.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":52},{"krate":0,"index":130},{"krate":0,"index":171}],"decl_id":null,"docs":" Traits implemented by scalar, non-SIMD, types.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","byte_start":1988,"byte_end":2000,"line_start":40,"line_end":40,"column_start":1,"column_end":13}},{"value":"/ Traits implemented by scalar, non-SIMD, types.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/mod.rs","byte_start":2032,"byte_end":2082,"line_start":1,"line_end":1,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":28},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":2817,"byte_end":2826,"line_start":15,"line_end":15,"column_start":11,"column_end":20},"name":"RealField","qualname":"::scalar::real::RealField","value":"RealField: ComplexField<RealField = Self> + RelativeEq<Epsilon = Self> + UlpsEq<Epsilon =\nSelf> + Signed + Bounded + PartialOrd","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50}],"decl_id":null,"docs":" Trait shared by all reals.\n","sig":null,"attributes":[{"value":"/ Trait shared by all reals.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":2753,"byte_end":2783,"line_start":13,"line_end":13,"column_start":1,"column_end":31}},{"value":"allow(missing_docs)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":2784,"byte_end":2806,"line_start":14,"line_end":14,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3028,"byte_end":3044,"line_start":24,"line_end":24,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::scalar::real::RealField::is_sign_positive","value":"pub fn is_sign_positive(Self) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Is the sign of this real number positive?\n","sig":null,"attributes":[{"value":"/ Is the sign of this real number positive?","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":2975,"byte_end":3020,"line_start":23,"line_end":23,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3117,"byte_end":3133,"line_start":26,"line_end":26,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::scalar::real::RealField::is_sign_negative","value":"pub fn is_sign_negative(Self) -> bool","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Is the sign of this real number negative?\n","sig":null,"attributes":[{"value":"/ Is the sign of this real number negative?","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3064,"byte_end":3109,"line_start":25,"line_end":25,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3356,"byte_end":3364,"line_start":31,"line_end":31,"column_start":8,"column_end":16},"name":"copysign","qualname":"::scalar::real::RealField::copysign","value":"pub fn copysign(Self, Self) -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" Copies the sign of `self` to `to`.","sig":null,"attributes":[{"value":"/ Copies the sign of `self` to `to`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3153,"byte_end":3191,"line_start":27,"line_end":27,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3196,"byte_end":3199,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ - Returns `to.simd_abs()` if `self` is positive or positive-zero.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3204,"byte_end":3273,"line_start":29,"line_end":29,"column_start":5,"column_end":74}},{"value":"/ - Returns `-to.simd_abs()` if `self` is negative or negative-zero.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3278,"byte_end":3348,"line_start":30,"line_end":30,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3398,"byte_end":3401,"line_start":33,"line_end":33,"column_start":8,"column_end":11},"name":"max","qualname":"::scalar::real::RealField::max","value":"pub fn max(Self, Self) -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3437,"byte_end":3440,"line_start":34,"line_end":34,"column_start":8,"column_end":11},"name":"min","qualname":"::scalar::real::RealField::min","value":"pub fn min(Self, Self) -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3476,"byte_end":3481,"line_start":35,"line_end":35,"column_start":8,"column_end":13},"name":"clamp","qualname":"::scalar::real::RealField::clamp","value":"pub fn clamp(Self, Self, Self) -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3526,"byte_end":3531,"line_start":36,"line_end":36,"column_start":8,"column_end":13},"name":"atan2","qualname":"::scalar::real::RealField::atan2","value":"pub fn atan2(Self, Self) -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3568,"byte_end":3570,"line_start":38,"line_end":38,"column_start":8,"column_end":10},"name":"pi","qualname":"::scalar::real::RealField::pi","value":"pub fn pi() -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3589,"byte_end":3595,"line_start":39,"line_end":39,"column_start":8,"column_end":14},"name":"two_pi","qualname":"::scalar::real::RealField::two_pi","value":"pub fn two_pi() -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3614,"byte_end":3623,"line_start":40,"line_end":40,"column_start":8,"column_end":17},"name":"frac_pi_2","qualname":"::scalar::real::RealField::frac_pi_2","value":"pub fn frac_pi_2() -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3642,"byte_end":3651,"line_start":41,"line_end":41,"column_start":8,"column_end":17},"name":"frac_pi_3","qualname":"::scalar::real::RealField::frac_pi_3","value":"pub fn frac_pi_3() -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3670,"byte_end":3679,"line_start":42,"line_end":42,"column_start":8,"column_end":17},"name":"frac_pi_4","qualname":"::scalar::real::RealField::frac_pi_4","value":"pub fn frac_pi_4() -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3698,"byte_end":3707,"line_start":43,"line_end":43,"column_start":8,"column_end":17},"name":"frac_pi_6","qualname":"::scalar::real::RealField::frac_pi_6","value":"pub fn frac_pi_6() -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3726,"byte_end":3735,"line_start":44,"line_end":44,"column_start":8,"column_end":17},"name":"frac_pi_8","qualname":"::scalar::real::RealField::frac_pi_8","value":"pub fn frac_pi_8() -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3754,"byte_end":3763,"line_start":45,"line_end":45,"column_start":8,"column_end":17},"name":"frac_1_pi","qualname":"::scalar::real::RealField::frac_1_pi","value":"pub fn frac_1_pi() -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3782,"byte_end":3791,"line_start":46,"line_end":46,"column_start":8,"column_end":17},"name":"frac_2_pi","qualname":"::scalar::real::RealField::frac_2_pi","value":"pub fn frac_2_pi() -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3810,"byte_end":3824,"line_start":47,"line_end":47,"column_start":8,"column_end":22},"name":"frac_2_sqrt_pi","qualname":"::scalar::real::RealField::frac_2_sqrt_pi","value":"pub fn frac_2_sqrt_pi() -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3844,"byte_end":3845,"line_start":49,"line_end":49,"column_start":8,"column_end":9},"name":"e","qualname":"::scalar::real::RealField::e","value":"pub fn e() -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3864,"byte_end":3870,"line_start":50,"line_end":50,"column_start":8,"column_end":14},"name":"log2_e","qualname":"::scalar::real::RealField::log2_e","value":"pub fn log2_e() -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3889,"byte_end":3896,"line_start":51,"line_end":51,"column_start":8,"column_end":15},"name":"log10_e","qualname":"::scalar::real::RealField::log10_e","value":"pub fn log10_e() -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3915,"byte_end":3919,"line_start":52,"line_end":52,"column_start":8,"column_end":12},"name":"ln_2","qualname":"::scalar::real::RealField::ln_2","value":"pub fn ln_2() -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":3938,"byte_end":3943,"line_start":53,"line_end":53,"column_start":8,"column_end":13},"name":"ln_10","qualname":"::scalar::real::RealField::ln_10","value":"pub fn ln_10() -> Self","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":72},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","byte_start":14507,"byte_end":14519,"line_start":162,"line_end":162,"column_start":11,"column_end":23},"name":"ComplexField","qualname":"::scalar::complex::ComplexField","value":"ComplexField: SubsetOf<Self> + SupersetOf<f64> + Field<Element = Self, SimdBool = Self> +\nCopy + Neg<Output = Self> + Send + Sync + Any + 'static + Debug +\nFromPrimitive + Display","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":74},{"krate":0,"index":75}],"decl_id":null,"docs":" Trait shared by all complex fields and its subfields (like real numbers).","sig":null,"attributes":[{"value":"/ Trait shared by all complex fields and its subfields (like real numbers).","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","byte_start":14025,"byte_end":14102,"line_start":155,"line_end":155,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","byte_start":14103,"byte_end":14106,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ Complex numbers are equipped with functions that are commonly used on complex numbers and reals.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","byte_start":14107,"byte_end":14207,"line_start":157,"line_end":157,"column_start":1,"column_end":101}},{"value":"/ The results of those functions only have to be approximately equal to the actual theoretical values.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","byte_start":14208,"byte_end":14312,"line_start":158,"line_end":158,"column_start":1,"column_end":105}},{"value":"allow(missing_docs)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","byte_start":14474,"byte_end":14496,"line_start":161,"line_end":161,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":73},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","byte_start":14794,"byte_end":14803,"line_start":178,"line_end":178,"column_start":10,"column_end":19},"name":"RealField","qualname":"::scalar::complex::ComplexField::RealField","value":"type RealField: RealField;","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","byte_start":14863,"byte_end":14872,"line_start":181,"line_end":181,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::scalar::complex::ComplexField::is_finite","value":"pub fn is_finite(&Self) -> bool","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","byte_start":14896,"byte_end":14904,"line_start":182,"line_end":182,"column_start":8,"column_end":16},"name":"try_sqrt","qualname":"::scalar::complex::ComplexField::try_sqrt","value":"pub fn try_sqrt(Self) -> Option<Self>","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":144},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44240,"byte_end":44249,"line_start":6,"line_end":6,"column_start":11,"column_end":20},"name":"ClosedAdd","qualname":"::scalar::field::ClosedAdd","value":"ClosedAdd<Right = Self>: Sized + Add<Right, Output = Self> + AddAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Add` and `AddAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Add` and `AddAssign` with result of type `Self`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44156,"byte_end":44229,"line_start":5,"line_end":5,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":146},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44406,"byte_end":44415,"line_start":9,"line_end":9,"column_start":11,"column_end":20},"name":"ClosedSub","qualname":"::scalar::field::ClosedSub","value":"ClosedSub<Right = Self>: Sized + Sub<Right, Output = Self> + SubAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Sub` and `SubAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Sub` and `SubAssign` with result of type `Self`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44322,"byte_end":44395,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":148},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44572,"byte_end":44581,"line_start":12,"line_end":12,"column_start":11,"column_end":20},"name":"ClosedMul","qualname":"::scalar::field::ClosedMul","value":"ClosedMul<Right = Self>: Sized + Mul<Right, Output = Self> + MulAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Mul` and `MulAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Mul` and `MulAssign` with result of type `Self`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44488,"byte_end":44561,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":150},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44738,"byte_end":44747,"line_start":15,"line_end":15,"column_start":11,"column_end":20},"name":"ClosedDiv","qualname":"::scalar::field::ClosedDiv","value":"ClosedDiv<Right = Self>: Sized + Div<Right, Output = Self> + DivAssign<Right>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Div` and `DivAssign` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Div` and `DivAssign` with result of type `Self`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44654,"byte_end":44727,"line_start":14,"line_end":14,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":152},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44888,"byte_end":44897,"line_start":18,"line_end":18,"column_start":11,"column_end":20},"name":"ClosedNeg","qualname":"::scalar::field::ClosedNeg","value":"ClosedNeg: Sized + Neg<Output = Self>","parent":null,"children":[],"decl_id":null,"docs":" Trait __alias__ for `Neg` with result of type `Self`.\n","sig":null,"attributes":[{"value":"/ Trait __alias__ for `Neg` with result of type `Self`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44820,"byte_end":44877,"line_start":17,"line_end":17,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":167},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":45428,"byte_end":45433,"line_start":27,"line_end":27,"column_start":11,"column_end":16},"name":"Field","qualname":"::scalar::field::Field","value":"Field: SimdValue + NumAssign + ClosedNeg","parent":null,"children":[],"decl_id":null,"docs":" Trait implemented by fields, i.e., complex numbers and floats.\n","sig":null,"attributes":[{"value":"/ Trait implemented by fields, i.e., complex numbers and floats.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":45351,"byte_end":45417,"line_start":26,"line_end":26,"column_start":1,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":174},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":47018,"byte_end":47026,"line_start":24,"line_end":24,"column_start":11,"column_end":19},"name":"SubsetOf","qualname":"::scalar::subset::SubsetOf","value":"SubsetOf<T>: Sized","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179}],"decl_id":null,"docs":" Nested sets and conversions between them (using an injective mapping). Useful to work with\n substructures. In generic code, it is preferable to use `SupersetOf` as trait bound whenever\n possible instead of `SubsetOf` (because SupersetOf is automatically implemented whenever\n `SubsetOf` is).","sig":null,"attributes":[{"value":"/ Nested sets and conversions between them (using an injective mapping). Useful to work with","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":45826,"byte_end":45920,"line_start":6,"line_end":6,"column_start":1,"column_end":95}},{"value":"/ substructures. In generic code, it is preferable to use `SupersetOf` as trait bound whenever","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":45921,"byte_end":46017,"line_start":7,"line_end":7,"column_start":1,"column_end":97}},{"value":"/ possible instead of `SubsetOf` (because SupersetOf is automatically implemented whenever","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":46018,"byte_end":46110,"line_start":8,"line_end":8,"column_start":1,"column_end":93}},{"value":"/ `SubsetOf` is).","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":46111,"byte_end":46130,"line_start":9,"line_end":9,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":46131,"byte_end":46134,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The notion of \"nested sets\" is very broad and applies to what the types are _supposed to","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":46135,"byte_end":46227,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/ represent_, independently from their actual implementation details and limitations. For","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":46228,"byte_end":46319,"line_start":12,"line_end":12,"column_start":1,"column_end":92}},{"value":"/ example:","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":46320,"byte_end":46332,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/ * f32 and f64 are both supposed to represent reals and are thus considered equal (even if in","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":46333,"byte_end":46429,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"/ practice f64 has more elements).","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":46430,"byte_end":46466,"line_start":15,"line_end":15,"column_start":1,"column_end":37}},{"value":"/ * u32 and i8 are respectively supposed to represent natural and relative numbers. Thus, u32 is","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":46467,"byte_end":46565,"line_start":16,"line_end":16,"column_start":1,"column_end":99}},{"value":"/ a subset of i8.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":46566,"byte_end":46585,"line_start":17,"line_end":17,"column_start":1,"column_end":20}},{"value":"/ * A quaternion and a 3x3 orthogonal matrix with unit determinant are both sets of rotations.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":46586,"byte_end":46682,"line_start":18,"line_end":18,"column_start":1,"column_end":97}},{"value":"/ They can thus be considered equal.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":46683,"byte_end":46721,"line_start":19,"line_end":19,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":46722,"byte_end":46725,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ In other words, implementation details due to machine limitations are ignored (otherwise we","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":46726,"byte_end":46821,"line_start":21,"line_end":21,"column_start":1,"column_end":96}},{"value":"/ could not even, e.g., convert a u64 to an i64). If considering those limitations are","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":46822,"byte_end":46910,"line_start":22,"line_end":22,"column_start":1,"column_end":89}},{"value":"/ important, other crates allowing you to query the limitations of given types should be used.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":46911,"byte_end":47007,"line_start":23,"line_end":23,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":47132,"byte_end":47143,"line_start":26,"line_end":26,"column_start":8,"column_end":19},"name":"to_superset","qualname":"::scalar::subset::SubsetOf::to_superset","value":"pub fn to_superset(&Self) -> T","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" The inclusion map: converts `self` to the equivalent element of its superset.\n","sig":null,"attributes":[{"value":"/ The inclusion map: converts `self` to the equivalent element of its superset.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":47043,"byte_end":47124,"line_start":25,"line_end":25,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":47359,"byte_end":47372,"line_start":32,"line_end":32,"column_start":8,"column_end":21},"name":"from_superset","qualname":"::scalar::subset::SubsetOf::from_superset","value":"pub fn from_superset(&T) -> Option<Self>","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" The inverse inclusion map: attempts to construct `self` from the equivalent element of its\n superset.","sig":null,"attributes":[{"value":"/ The inverse inclusion map: attempts to construct `self` from the equivalent element of its","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":47162,"byte_end":47256,"line_start":28,"line_end":28,"column_start":5,"column_end":99}},{"value":"/ superset.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":47261,"byte_end":47274,"line_start":29,"line_end":29,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":47279,"byte_end":47282,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Must return `None` if `element` has no equivalent in `Self`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":47287,"byte_end":47351,"line_start":31,"line_end":31,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":47660,"byte_end":47683,"line_start":41,"line_end":41,"column_start":8,"column_end":31},"name":"from_superset_unchecked","qualname":"::scalar::subset::SubsetOf::from_superset_unchecked","value":"pub fn from_superset_unchecked(&T) -> Self","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" Use with care! Same as `self.to_superset` but without any property checks. Always succeeds.\n","sig":null,"attributes":[{"value":"/ Use with care! Same as `self.to_superset` but without any property checks. Always succeeds.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":47557,"byte_end":47652,"line_start":40,"line_end":40,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":47810,"byte_end":47822,"line_start":44,"line_end":44,"column_start":8,"column_end":20},"name":"is_in_subset","qualname":"::scalar::subset::SubsetOf::is_in_subset","value":"pub fn is_in_subset(&T) -> bool","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" Checks if `element` is actually part of the subset `Self` (and can be converted to it).\n","sig":null,"attributes":[{"value":"/ Checks if `element` is actually part of the subset `Self` (and can be converted to it).","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":47711,"byte_end":47802,"line_start":43,"line_end":43,"column_start":5,"column_end":96}}]},{"kind":"Trait","id":{"krate":0,"index":180},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":48995,"byte_end":49005,"line_start":64,"line_end":64,"column_start":11,"column_end":21},"name":"SupersetOf","qualname":"::scalar::subset::SupersetOf","value":"SupersetOf<T>: Sized","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185}],"decl_id":null,"docs":" Nested sets and conversions between them. Useful to work with substructures. It is preferable\n to implement the `SubsetOf` trait instead of `SupersetOf` whenever possible (because\n `SupersetOf` is automatically implemented whenever `SubsetOf` is).","sig":null,"attributes":[{"value":"/ Nested sets and conversions between them. Useful to work with substructures. It is preferable","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":47848,"byte_end":47945,"line_start":47,"line_end":47,"column_start":1,"column_end":98}},{"value":"/ to implement the `SubsetOf` trait instead of `SupersetOf` whenever possible (because","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":47946,"byte_end":48034,"line_start":48,"line_end":48,"column_start":1,"column_end":89}},{"value":"/ `SupersetOf` is automatically implemented whenever `SubsetOf` is).","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":48035,"byte_end":48105,"line_start":49,"line_end":49,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":48106,"byte_end":48109,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ The notion of \"nested sets\" is very broad and applies to what the types are _supposed to","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":48110,"byte_end":48202,"line_start":51,"line_end":51,"column_start":1,"column_end":93}},{"value":"/ represent_, independently from their actual implementation details and limitations. For","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":48203,"byte_end":48294,"line_start":52,"line_end":52,"column_start":1,"column_end":92}},{"value":"/ example:","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":48295,"byte_end":48307,"line_start":53,"line_end":53,"column_start":1,"column_end":13}},{"value":"/ * f32 and f64 are both supposed to represent reals and are thus considered equal (even if in","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":48308,"byte_end":48404,"line_start":54,"line_end":54,"column_start":1,"column_end":97}},{"value":"/ practice f64 has more elements).","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":48405,"byte_end":48441,"line_start":55,"line_end":55,"column_start":1,"column_end":37}},{"value":"/ * u32 and i8 are respectively supposed to represent natural and relative numbers. Thus, i8 is","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":48442,"byte_end":48539,"line_start":56,"line_end":56,"column_start":1,"column_end":98}},{"value":"/ a superset of u32.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":48540,"byte_end":48562,"line_start":57,"line_end":57,"column_start":1,"column_end":23}},{"value":"/ * A quaternion and a 3x3 orthogonal matrix with unit determinant are both sets of rotations.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":48563,"byte_end":48659,"line_start":58,"line_end":58,"column_start":1,"column_end":97}},{"value":"/ They can thus be considered equal.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":48660,"byte_end":48698,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":48699,"byte_end":48702,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ In other words, implementation details due to machine limitations are ignored (otherwise we","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":48703,"byte_end":48798,"line_start":61,"line_end":61,"column_start":1,"column_end":96}},{"value":"/ could not even, e.g., convert a u64 to an i64). If considering those limitations are","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":48799,"byte_end":48887,"line_start":62,"line_end":62,"column_start":1,"column_end":89}},{"value":"/ important, other crates allowing you to query the limitations of given types should be used.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":48888,"byte_end":48984,"line_start":63,"line_end":63,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":49219,"byte_end":49228,"line_start":69,"line_end":69,"column_start":8,"column_end":17},"name":"to_subset","qualname":"::scalar::subset::SupersetOf::to_subset","value":"pub fn to_subset(&Self) -> Option<T>","parent":{"krate":0,"index":180},"children":[],"decl_id":null,"docs":" The inverse inclusion map: attempts to construct `self` from the equivalent element of its\n superset.","sig":null,"attributes":[{"value":"/ The inverse inclusion map: attempts to construct `self` from the equivalent element of its","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":49022,"byte_end":49116,"line_start":65,"line_end":65,"column_start":5,"column_end":99}},{"value":"/ superset.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":49121,"byte_end":49134,"line_start":66,"line_end":66,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":49139,"byte_end":49142,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ Must return `None` if `element` has no equivalent in `Self`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":49147,"byte_end":49211,"line_start":68,"line_end":68,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":49477,"byte_end":49489,"line_start":78,"line_end":78,"column_start":8,"column_end":20},"name":"is_in_subset","qualname":"::scalar::subset::SupersetOf::is_in_subset","value":"pub fn is_in_subset(&Self) -> bool","parent":{"krate":0,"index":180},"children":[],"decl_id":null,"docs":" Checks if `self` is actually part of its subset `T` (and can be converted to it).\n","sig":null,"attributes":[{"value":"/ Checks if `self` is actually part of its subset `T` (and can be converted to it).","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":49384,"byte_end":49469,"line_start":77,"line_end":77,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":49612,"byte_end":49631,"line_start":81,"line_end":81,"column_start":8,"column_end":27},"name":"to_subset_unchecked","qualname":"::scalar::subset::SupersetOf::to_subset_unchecked","value":"pub fn to_subset_unchecked(&Self) -> T","parent":{"krate":0,"index":180},"children":[],"decl_id":null,"docs":" Use with care! Same as `self.to_subset` but without any property checks. Always succeeds.\n","sig":null,"attributes":[{"value":"/ Use with care! Same as `self.to_subset` but without any property checks. Always succeeds.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":49511,"byte_end":49604,"line_start":80,"line_end":80,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":49739,"byte_end":49750,"line_start":84,"line_end":84,"column_start":8,"column_end":19},"name":"from_subset","qualname":"::scalar::subset::SupersetOf::from_subset","value":"pub fn from_subset(&T) -> Self","parent":{"krate":0,"index":180},"children":[],"decl_id":null,"docs":" The inclusion map: converts `self` to the equivalent element of its superset.\n","sig":null,"attributes":[{"value":"/ The inclusion map: converts `self` to the equivalent element of its superset.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":49650,"byte_end":49731,"line_start":83,"line_end":83,"column_start":5,"column_end":86}}]},{"kind":"Mod","id":{"krate":0,"index":201},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"simd","qualname":"::simd","value":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/mod.rs","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":387},{"krate":0,"index":446},{"krate":0,"index":521},{"krate":0,"index":538},{"krate":0,"index":565},{"krate":0,"index":610},{"krate":0,"index":626}],"decl_id":null,"docs":" Traits implemented by SIMD types and non-SIMD types.\n","sig":null,"attributes":[{"value":"/ Traits implemented by SIMD types and non-SIMD types.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/mod.rs","byte_start":53432,"byte_end":53488,"line_start":1,"line_end":1,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1474},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":56827,"byte_end":56835,"line_start":44,"line_end":44,"column_start":12,"column_end":20},"name":"AutoSimd","qualname":"::simd::auto_simd_impl::AutoSimd","value":"","parent":null,"children":[],"decl_id":null,"docs":" An Simd structure that implements all the relevant traits from `num` an `simba`.","sig":null,"attributes":[{"value":"/ An Simd structure that implements all the relevant traits from `num` an `simba`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":56614,"byte_end":56698,"line_start":39,"line_end":39,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":56699,"byte_end":56702,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This is needed to overcome the orphan rules.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":56703,"byte_end":56751,"line_start":41,"line_end":41,"column_start":1,"column_end":49}},{"value":"repr(align(16))","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":56752,"byte_end":56770,"line_start":42,"line_end":42,"column_start":1,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":1477},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":56839,"byte_end":56844,"line_start":44,"line_end":44,"column_start":24,"column_end":29},"name":"0","qualname":"::simd::auto_simd_impl::AutoSimd::0","value":"N","parent":{"krate":0,"index":1474},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1497},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":57068,"byte_end":57080,"line_start":50,"line_end":50,"column_start":12,"column_end":24},"name":"AutoBoolSimd","qualname":"::simd::auto_simd_impl::AutoBoolSimd","value":"","parent":null,"children":[],"decl_id":null,"docs":" An Simd boolean structure that implements all the relevant traits from `num` an `simba`.","sig":null,"attributes":[{"value":"/ An Simd boolean structure that implements all the relevant traits from `num` an `simba`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":56847,"byte_end":56939,"line_start":45,"line_end":45,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":56940,"byte_end":56943,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ This is needed to overcome the orphan rules.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":56944,"byte_end":56992,"line_start":47,"line_end":47,"column_start":1,"column_end":49}},{"value":"repr(align(16))","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":56993,"byte_end":57011,"line_start":48,"line_end":48,"column_start":1,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":1500},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":57084,"byte_end":57089,"line_start":50,"line_end":50,"column_start":28,"column_end":33},"name":"0","qualname":"::simd::auto_simd_impl::AutoBoolSimd::0","value":"N","parent":{"krate":0,"index":1497},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":258},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":107365,"byte_end":107374,"line_start":1537,"line_end":1537,"column_start":10,"column_end":19},"name":"AutoF32x2","qualname":"::simd::auto_simd_impl::AutoF32x2","value":"AutoSimd<[f32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":260},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":107406,"byte_end":107415,"line_start":1538,"line_end":1538,"column_start":10,"column_end":19},"name":"AutoF32x4","qualname":"::simd::auto_simd_impl::AutoF32x4","value":"AutoSimd<[f32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":262},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":107447,"byte_end":107456,"line_start":1539,"line_end":1539,"column_start":10,"column_end":19},"name":"AutoF32x8","qualname":"::simd::auto_simd_impl::AutoF32x8","value":"AutoSimd<[f32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":264},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":107488,"byte_end":107498,"line_start":1540,"line_end":1540,"column_start":10,"column_end":20},"name":"AutoF32x16","qualname":"::simd::auto_simd_impl::AutoF32x16","value":"AutoSimd<[f32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":266},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":107531,"byte_end":107540,"line_start":1541,"line_end":1541,"column_start":10,"column_end":19},"name":"AutoF64x2","qualname":"::simd::auto_simd_impl::AutoF64x2","value":"AutoSimd<[f64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":268},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":107572,"byte_end":107581,"line_start":1542,"line_end":1542,"column_start":10,"column_end":19},"name":"AutoF64x4","qualname":"::simd::auto_simd_impl::AutoF64x4","value":"AutoSimd<[f64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":270},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":107613,"byte_end":107622,"line_start":1543,"line_end":1543,"column_start":10,"column_end":19},"name":"AutoF64x8","qualname":"::simd::auto_simd_impl::AutoF64x8","value":"AutoSimd<[f64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":272},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":107654,"byte_end":107664,"line_start":1544,"line_end":1544,"column_start":10,"column_end":20},"name":"AutoI128x1","qualname":"::simd::auto_simd_impl::AutoI128x1","value":"AutoSimd<[i128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":274},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":107697,"byte_end":107707,"line_start":1545,"line_end":1545,"column_start":10,"column_end":20},"name":"AutoI128x2","qualname":"::simd::auto_simd_impl::AutoI128x2","value":"AutoSimd<[i128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":276},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":107740,"byte_end":107750,"line_start":1546,"line_end":1546,"column_start":10,"column_end":20},"name":"AutoI128x4","qualname":"::simd::auto_simd_impl::AutoI128x4","value":"AutoSimd<[i128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":278},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":107783,"byte_end":107792,"line_start":1547,"line_end":1547,"column_start":10,"column_end":19},"name":"AutoI16x2","qualname":"::simd::auto_simd_impl::AutoI16x2","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":280},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":107824,"byte_end":107833,"line_start":1548,"line_end":1548,"column_start":10,"column_end":19},"name":"AutoI16x4","qualname":"::simd::auto_simd_impl::AutoI16x4","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":282},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":107865,"byte_end":107874,"line_start":1549,"line_end":1549,"column_start":10,"column_end":19},"name":"AutoI16x8","qualname":"::simd::auto_simd_impl::AutoI16x8","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":284},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":107906,"byte_end":107916,"line_start":1550,"line_end":1550,"column_start":10,"column_end":20},"name":"AutoI16x16","qualname":"::simd::auto_simd_impl::AutoI16x16","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":286},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":107949,"byte_end":107959,"line_start":1551,"line_end":1551,"column_start":10,"column_end":20},"name":"AutoI16x32","qualname":"::simd::auto_simd_impl::AutoI16x32","value":"AutoSimd<[i16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":288},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":107992,"byte_end":108001,"line_start":1552,"line_end":1552,"column_start":10,"column_end":19},"name":"AutoI32x2","qualname":"::simd::auto_simd_impl::AutoI32x2","value":"AutoSimd<[i32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":290},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":108033,"byte_end":108042,"line_start":1553,"line_end":1553,"column_start":10,"column_end":19},"name":"AutoI32x4","qualname":"::simd::auto_simd_impl::AutoI32x4","value":"AutoSimd<[i32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":292},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":108074,"byte_end":108083,"line_start":1554,"line_end":1554,"column_start":10,"column_end":19},"name":"AutoI32x8","qualname":"::simd::auto_simd_impl::AutoI32x8","value":"AutoSimd<[i32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":294},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":108115,"byte_end":108125,"line_start":1555,"line_end":1555,"column_start":10,"column_end":20},"name":"AutoI32x16","qualname":"::simd::auto_simd_impl::AutoI32x16","value":"AutoSimd<[i32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":296},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":108158,"byte_end":108167,"line_start":1556,"line_end":1556,"column_start":10,"column_end":19},"name":"AutoI64x2","qualname":"::simd::auto_simd_impl::AutoI64x2","value":"AutoSimd<[i64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":298},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":108199,"byte_end":108208,"line_start":1557,"line_end":1557,"column_start":10,"column_end":19},"name":"AutoI64x4","qualname":"::simd::auto_simd_impl::AutoI64x4","value":"AutoSimd<[i64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":300},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":108240,"byte_end":108249,"line_start":1558,"line_end":1558,"column_start":10,"column_end":19},"name":"AutoI64x8","qualname":"::simd::auto_simd_impl::AutoI64x8","value":"AutoSimd<[i64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":302},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":108281,"byte_end":108289,"line_start":1559,"line_end":1559,"column_start":10,"column_end":18},"name":"AutoI8x2","qualname":"::simd::auto_simd_impl::AutoI8x2","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":304},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":108320,"byte_end":108328,"line_start":1560,"line_end":1560,"column_start":10,"column_end":18},"name":"AutoI8x4","qualname":"::simd::auto_simd_impl::AutoI8x4","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":306},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":108359,"byte_end":108367,"line_start":1561,"line_end":1561,"column_start":10,"column_end":18},"name":"AutoI8x8","qualname":"::simd::auto_simd_impl::AutoI8x8","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":308},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":108398,"byte_end":108407,"line_start":1562,"line_end":1562,"column_start":10,"column_end":19},"name":"AutoI8x16","qualname":"::simd::auto_simd_impl::AutoI8x16","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":310},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":108439,"byte_end":108448,"line_start":1563,"line_end":1563,"column_start":10,"column_end":19},"name":"AutoI8x32","qualname":"::simd::auto_simd_impl::AutoI8x32","value":"AutoSimd<[i8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":312},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":108524,"byte_end":108535,"line_start":1565,"line_end":1565,"column_start":10,"column_end":21},"name":"AutoIsizex2","qualname":"::simd::auto_simd_impl::AutoIsizex2","value":"AutoSimd<[isize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":314},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":108569,"byte_end":108580,"line_start":1566,"line_end":1566,"column_start":10,"column_end":21},"name":"AutoIsizex4","qualname":"::simd::auto_simd_impl::AutoIsizex4","value":"AutoSimd<[isize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":316},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":108614,"byte_end":108625,"line_start":1567,"line_end":1567,"column_start":10,"column_end":21},"name":"AutoIsizex8","qualname":"::simd::auto_simd_impl::AutoIsizex8","value":"AutoSimd<[isize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":318},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":108659,"byte_end":108669,"line_start":1568,"line_end":1568,"column_start":10,"column_end":20},"name":"AutoU128x1","qualname":"::simd::auto_simd_impl::AutoU128x1","value":"AutoSimd<[u128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":320},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":108702,"byte_end":108712,"line_start":1569,"line_end":1569,"column_start":10,"column_end":20},"name":"AutoU128x2","qualname":"::simd::auto_simd_impl::AutoU128x2","value":"AutoSimd<[u128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":322},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":108745,"byte_end":108755,"line_start":1570,"line_end":1570,"column_start":10,"column_end":20},"name":"AutoU128x4","qualname":"::simd::auto_simd_impl::AutoU128x4","value":"AutoSimd<[u128; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":324},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":108788,"byte_end":108797,"line_start":1571,"line_end":1571,"column_start":10,"column_end":19},"name":"AutoU16x2","qualname":"::simd::auto_simd_impl::AutoU16x2","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":326},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":108829,"byte_end":108838,"line_start":1572,"line_end":1572,"column_start":10,"column_end":19},"name":"AutoU16x4","qualname":"::simd::auto_simd_impl::AutoU16x4","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":328},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":108870,"byte_end":108879,"line_start":1573,"line_end":1573,"column_start":10,"column_end":19},"name":"AutoU16x8","qualname":"::simd::auto_simd_impl::AutoU16x8","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":330},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":108911,"byte_end":108921,"line_start":1574,"line_end":1574,"column_start":10,"column_end":20},"name":"AutoU16x16","qualname":"::simd::auto_simd_impl::AutoU16x16","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":332},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":108954,"byte_end":108964,"line_start":1575,"line_end":1575,"column_start":10,"column_end":20},"name":"AutoU16x32","qualname":"::simd::auto_simd_impl::AutoU16x32","value":"AutoSimd<[u16; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":334},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":108997,"byte_end":109006,"line_start":1576,"line_end":1576,"column_start":10,"column_end":19},"name":"AutoU32x2","qualname":"::simd::auto_simd_impl::AutoU32x2","value":"AutoSimd<[u32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":336},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":109038,"byte_end":109047,"line_start":1577,"line_end":1577,"column_start":10,"column_end":19},"name":"AutoU32x4","qualname":"::simd::auto_simd_impl::AutoU32x4","value":"AutoSimd<[u32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":338},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":109079,"byte_end":109088,"line_start":1578,"line_end":1578,"column_start":10,"column_end":19},"name":"AutoU32x8","qualname":"::simd::auto_simd_impl::AutoU32x8","value":"AutoSimd<[u32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":340},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":109120,"byte_end":109130,"line_start":1579,"line_end":1579,"column_start":10,"column_end":20},"name":"AutoU32x16","qualname":"::simd::auto_simd_impl::AutoU32x16","value":"AutoSimd<[u32; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":342},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":109163,"byte_end":109172,"line_start":1580,"line_end":1580,"column_start":10,"column_end":19},"name":"AutoU64x2","qualname":"::simd::auto_simd_impl::AutoU64x2","value":"AutoSimd<[u64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":344},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":109204,"byte_end":109213,"line_start":1581,"line_end":1581,"column_start":10,"column_end":19},"name":"AutoU64x4","qualname":"::simd::auto_simd_impl::AutoU64x4","value":"AutoSimd<[u64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":346},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":109245,"byte_end":109254,"line_start":1582,"line_end":1582,"column_start":10,"column_end":19},"name":"AutoU64x8","qualname":"::simd::auto_simd_impl::AutoU64x8","value":"AutoSimd<[u64; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":348},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":109286,"byte_end":109294,"line_start":1583,"line_end":1583,"column_start":10,"column_end":18},"name":"AutoU8x2","qualname":"::simd::auto_simd_impl::AutoU8x2","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":350},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":109325,"byte_end":109333,"line_start":1584,"line_end":1584,"column_start":10,"column_end":18},"name":"AutoU8x4","qualname":"::simd::auto_simd_impl::AutoU8x4","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":352},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":109364,"byte_end":109372,"line_start":1585,"line_end":1585,"column_start":10,"column_end":18},"name":"AutoU8x8","qualname":"::simd::auto_simd_impl::AutoU8x8","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":354},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":109403,"byte_end":109412,"line_start":1586,"line_end":1586,"column_start":10,"column_end":19},"name":"AutoU8x16","qualname":"::simd::auto_simd_impl::AutoU8x16","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":356},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":109444,"byte_end":109453,"line_start":1587,"line_end":1587,"column_start":10,"column_end":19},"name":"AutoU8x32","qualname":"::simd::auto_simd_impl::AutoU8x32","value":"AutoSimd<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":358},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":109529,"byte_end":109540,"line_start":1589,"line_end":1589,"column_start":10,"column_end":21},"name":"AutoUsizex2","qualname":"::simd::auto_simd_impl::AutoUsizex2","value":"AutoSimd<[usize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":360},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":109574,"byte_end":109585,"line_start":1590,"line_end":1590,"column_start":10,"column_end":21},"name":"AutoUsizex4","qualname":"::simd::auto_simd_impl::AutoUsizex4","value":"AutoSimd<[usize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":362},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":109619,"byte_end":109630,"line_start":1591,"line_end":1591,"column_start":10,"column_end":21},"name":"AutoUsizex8","qualname":"::simd::auto_simd_impl::AutoUsizex8","value":"AutoSimd<[usize; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":364},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":109665,"byte_end":109675,"line_start":1593,"line_end":1593,"column_start":10,"column_end":20},"name":"AutoBoolx1","qualname":"::simd::auto_simd_impl::AutoBoolx1","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":366},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":109708,"byte_end":109719,"line_start":1594,"line_end":1594,"column_start":10,"column_end":21},"name":"AutoBoolx16","qualname":"::simd::auto_simd_impl::AutoBoolx16","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":368},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":109753,"byte_end":109763,"line_start":1595,"line_end":1595,"column_start":10,"column_end":20},"name":"AutoBoolx2","qualname":"::simd::auto_simd_impl::AutoBoolx2","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":370},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":109796,"byte_end":109807,"line_start":1596,"line_end":1596,"column_start":10,"column_end":21},"name":"AutoBoolx32","qualname":"::simd::auto_simd_impl::AutoBoolx32","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":372},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":109841,"byte_end":109851,"line_start":1597,"line_end":1597,"column_start":10,"column_end":20},"name":"AutoBoolx4","qualname":"::simd::auto_simd_impl::AutoBoolx4","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":374},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":109932,"byte_end":109942,"line_start":1599,"line_end":1599,"column_start":10,"column_end":20},"name":"AutoBoolx8","qualname":"::simd::auto_simd_impl::AutoBoolx8","value":"AutoSimd<[bool; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":394},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":110997,"byte_end":111005,"line_start":9,"line_end":9,"column_start":11,"column_end":19},"name":"SimdBool","qualname":"::simd::simd_bool::SimdBool","value":"SimdBool: Copy + BitAnd<Self, Output = Self> + BitOr<Self, Output = Self> + BitXor<Self,\nOutput = Self> + Not<Output = Self>","parent":null,"children":[{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":406},{"krate":0,"index":412}],"decl_id":null,"docs":" Lane-wise generalization of `bool` for SIMD booleans.","sig":null,"attributes":[{"value":"/ Lane-wise generalization of `bool` for SIMD booleans.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":110704,"byte_end":110761,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":110762,"byte_end":110765,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This trait implemented by `bool` as well as SIMD boolean types like `packed_simd::m32x4`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":110766,"byte_end":110859,"line_start":6,"line_end":6,"column_start":1,"column_end":94}},{"value":"/ It is designed to abstract the behavior of booleans so it can work with multi-lane boolean","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":110860,"byte_end":110954,"line_start":7,"line_end":7,"column_start":1,"column_end":95}},{"value":"/ values in an AoSoA setting.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":110955,"byte_end":110986,"line_start":8,"line_end":8,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111320,"byte_end":111327,"line_start":19,"line_end":19,"column_start":8,"column_end":15},"name":"bitmask","qualname":"::simd::simd_bool::SimdBool::bitmask","value":"pub fn bitmask(Self) -> u64","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" A bit mask representing the boolean state of each lanes of `self`.","sig":null,"attributes":[{"value":"/ A bit mask representing the boolean state of each lanes of `self`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111148,"byte_end":111218,"line_start":16,"line_end":16,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111223,"byte_end":111226,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ The `i-th` bit of the result is `1` iff. the `i-th` lane of `self` is `true`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111231,"byte_end":111312,"line_start":18,"line_end":18,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111403,"byte_end":111406,"line_start":21,"line_end":21,"column_start":8,"column_end":11},"name":"and","qualname":"::simd::simd_bool::SimdBool::and","value":"pub fn and(Self) -> bool","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" Lane-wise bitwise and of the vector elements.\n","sig":null,"attributes":[{"value":"/ Lane-wise bitwise and of the vector elements.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111346,"byte_end":111395,"line_start":20,"line_end":20,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111482,"byte_end":111484,"line_start":23,"line_end":23,"column_start":8,"column_end":10},"name":"or","qualname":"::simd::simd_bool::SimdBool::or","value":"pub fn or(Self) -> bool","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" Lane-wise bitwise or of the vector elements.\n","sig":null,"attributes":[{"value":"/ Lane-wise bitwise or of the vector elements.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111426,"byte_end":111474,"line_start":22,"line_end":22,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111561,"byte_end":111564,"line_start":25,"line_end":25,"column_start":8,"column_end":11},"name":"xor","qualname":"::simd::simd_bool::SimdBool::xor","value":"pub fn xor(Self) -> bool","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" Lane-wise bitwise xor of the vector elements.\n","sig":null,"attributes":[{"value":"/ Lane-wise bitwise xor of the vector elements.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111504,"byte_end":111553,"line_start":24,"line_end":24,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111622,"byte_end":111625,"line_start":27,"line_end":27,"column_start":8,"column_end":11},"name":"all","qualname":"::simd::simd_bool::SimdBool::all","value":"pub fn all(Self) -> bool","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" Are all vector lanes true?\n","sig":null,"attributes":[{"value":"/ Are all vector lanes true?","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111584,"byte_end":111614,"line_start":26,"line_end":26,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111681,"byte_end":111684,"line_start":29,"line_end":29,"column_start":8,"column_end":11},"name":"any","qualname":"::simd::simd_bool::SimdBool::any","value":"pub fn any(Self) -> bool","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" Is any vector lane true?\n","sig":null,"attributes":[{"value":"/ Is any vector lane true?","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111645,"byte_end":111673,"line_start":28,"line_end":28,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111743,"byte_end":111747,"line_start":31,"line_end":31,"column_start":8,"column_end":12},"name":"none","qualname":"::simd::simd_bool::SimdBool::none","value":"pub fn none(Self) -> bool","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" Are all vector lanes false?\n","sig":null,"attributes":[{"value":"/ Are all vector lanes false?","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111704,"byte_end":111735,"line_start":30,"line_end":30,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":112237,"byte_end":112244,"line_start":39,"line_end":39,"column_start":8,"column_end":15},"name":"if_else","qualname":"::simd::simd_bool::SimdBool::if_else","value":"pub fn if_else<Res: SimdValue<SimdBool = Self>, impl FnOnce() -> Res: FnOnce()\n               -> Res, impl FnOnce() -> Res: FnOnce() ->\n               Res>(Self, impl FnOnce() -> Res, impl FnOnce() -> Res) -> Res","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" Merges the value of `if_value()` and `else_value()` depending on the lanes of `self`.","sig":null,"attributes":[{"value":"/ Merges the value of `if_value()` and `else_value()` depending on the lanes of `self`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111767,"byte_end":111856,"line_start":32,"line_end":32,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111861,"byte_end":111864,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ - For each lane of `self` containing `1`, the result will contain the corresponding lane of `if_value()`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111869,"byte_end":111978,"line_start":34,"line_end":34,"column_start":5,"column_end":114}},{"value":"/ - For each lane of `self` containing `0`, the result will contain the corresponding lane of `else_value()`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111983,"byte_end":112094,"line_start":35,"line_end":35,"column_start":5,"column_end":116}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":112099,"byte_end":112102,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ The implementor of this trait is free to choose on what cases `if_value` and `else_value` are actually","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":112107,"byte_end":112213,"line_start":37,"line_end":37,"column_start":5,"column_end":111}},{"value":"/ called.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":112218,"byte_end":112229,"line_start":38,"line_end":38,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":113121,"byte_end":113129,"line_start":52,"line_end":52,"column_start":8,"column_end":16},"name":"if_else2","qualname":"::simd::simd_bool::SimdBool::if_else2","value":"pub fn if_else2<Res: SimdValue<SimdBool = Self>,\n                impl FnOnce() -> Res: FnOnce() -> Res,\n                impl FnOnce() -> Self: FnOnce() -> Self,\n                impl FnOnce() -> Res: FnOnce() -> Res,\n                impl FnOnce() -> Res: FnOnce() ->\n                Res>(Self, impl FnOnce() -> Res,\n                     (impl FnOnce() -> Self, impl FnOnce() -> Res),\n                     impl FnOnce() -> Res) -> Res","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" Merges the value of `if_value()` and `else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()`.","sig":null,"attributes":[{"value":"/ Merges the value of `if_value()` and `else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":112394,"byte_end":112519,"line_start":45,"line_end":45,"column_start":5,"column_end":130}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":112524,"byte_end":112527,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ - For each lane of `self` containing `1`, the result will contain the corresponding lane of `if_value()`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":112532,"byte_end":112641,"line_start":47,"line_end":47,"column_start":5,"column_end":114}},{"value":"/ - For each lane of `self` containing `0` but with a corresponding lane of `else_if.0()` containing `1`, the result will contain the corresponding lane of `else_if.1()`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":112646,"byte_end":112818,"line_start":48,"line_end":48,"column_start":5,"column_end":177}},{"value":"/ - For each lane of `self` containing `0` but with a corresponding lane of `else_if.0()` containing `0`, the result will contain the corresponding lane of `else_value()`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":112823,"byte_end":112996,"line_start":49,"line_end":49,"column_start":5,"column_end":178}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":113001,"byte_end":113004,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ The implementor of this trait is free to choose on what cases any of those closures are implemented.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":113009,"byte_end":113113,"line_start":51,"line_end":51,"column_start":5,"column_end":109}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":114206,"byte_end":114214,"line_start":67,"line_end":67,"column_start":8,"column_end":16},"name":"if_else3","qualname":"::simd::simd_bool::SimdBool::if_else3","value":"pub fn if_else3<Res: SimdValue<SimdBool = Self>,\n                impl FnOnce() -> Res: FnOnce() -> Res,\n                impl FnOnce() -> Self: FnOnce() -> Self,\n                impl FnOnce() -> Res: FnOnce() -> Res,\n                impl FnOnce() -> Self: FnOnce() -> Self,\n                impl FnOnce() -> Res: FnOnce() -> Res,\n                impl FnOnce() -> Res: FnOnce() ->\n                Res>(Self, impl FnOnce() -> Res,\n                     (impl FnOnce() -> Self, impl FnOnce() -> Res),\n                     (impl FnOnce() -> Self, impl FnOnce() -> Res),\n                     impl FnOnce() -> Res) -> Res","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" Merges the value of `if_value()` and `else_if.1()` and `else_else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()` and `else_else_if.0()`.","sig":null,"attributes":[{"value":"/ Merges the value of `if_value()` and `else_if.1()` and `else_else_if.1()` and `else_value()` depending on the lanes of `self` and `else_if.0()` and `else_else_if.0()`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":113343,"byte_end":113514,"line_start":59,"line_end":59,"column_start":5,"column_end":176}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":113519,"byte_end":113522,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ - For each lane of `self` containing `1`, the result will contain the corresponding lane of `if_value()`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":113527,"byte_end":113636,"line_start":61,"line_end":61,"column_start":5,"column_end":114}},{"value":"/ - For each lane of `self` containing `0` but with a corresponding lane of `else_if.0()` containing `1`, the result will contain the corresponding lane of `else_if.1()`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":113641,"byte_end":113813,"line_start":62,"line_end":62,"column_start":5,"column_end":177}},{"value":"/ - For each lane of `self` containing `0` and `else_if.0()` containing `0` and `else_else_if.0()` containing `1`, the result will contain the corresponding lane of `else_else_if.1()`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":113818,"byte_end":114004,"line_start":63,"line_end":63,"column_start":5,"column_end":191}},{"value":"/ - Other lanes will contain the corresponding lane of `else_value()`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":114009,"byte_end":114081,"line_start":64,"line_end":64,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":114086,"byte_end":114089,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ The implementor of this trait is free to choose on what cases any of those closures are implemented.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":114094,"byte_end":114198,"line_start":66,"line_end":66,"column_start":5,"column_end":109}}]},{"kind":"Trait","id":{"krate":0,"index":463},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_complex.rs","byte_start":116645,"byte_end":116661,"line_start":14,"line_end":14,"column_start":11,"column_end":27},"name":"SimdComplexField","qualname":"::simd::simd_complex::SimdComplexField","value":"SimdComplexField: SubsetOf<Self> + SupersetOf<f64> + Field + Copy + Neg<Output = Self> + Send +\nSync + Any + 'static + Debug + NumAssignOps + NumOps + PartialEq","parent":null,"children":[{"krate":0,"index":464},{"krate":0,"index":42497},{"krate":0,"index":42498},{"krate":0,"index":42499},{"krate":0,"index":42500},{"krate":0,"index":42501},{"krate":0,"index":42502},{"krate":0,"index":42503},{"krate":0,"index":42504},{"krate":0,"index":42505},{"krate":0,"index":42506},{"krate":0,"index":42507},{"krate":0,"index":42508},{"krate":0,"index":42509},{"krate":0,"index":42510},{"krate":0,"index":42511},{"krate":0,"index":42512},{"krate":0,"index":42513},{"krate":0,"index":42514},{"krate":0,"index":42515},{"krate":0,"index":42516},{"krate":0,"index":42517},{"krate":0,"index":42518},{"krate":0,"index":42519},{"krate":0,"index":42520},{"krate":0,"index":42521},{"krate":0,"index":42522},{"krate":0,"index":42523},{"krate":0,"index":42524},{"krate":0,"index":42525},{"krate":0,"index":42526},{"krate":0,"index":42527},{"krate":0,"index":42528},{"krate":0,"index":42529},{"krate":0,"index":42530},{"krate":0,"index":42531},{"krate":0,"index":42532},{"krate":0,"index":42533},{"krate":0,"index":42534},{"krate":0,"index":42535},{"krate":0,"index":42536},{"krate":0,"index":42537},{"krate":0,"index":42538},{"krate":0,"index":42539},{"krate":0,"index":42540},{"krate":0,"index":42541},{"krate":0,"index":42542},{"krate":0,"index":42543},{"krate":0,"index":42544},{"krate":0,"index":42545},{"krate":0,"index":42546},{"krate":0,"index":42547},{"krate":0,"index":42548},{"krate":0,"index":42549}],"decl_id":null,"docs":" Lane-wise generalisation of `ComplexField` for SIMD complex fields.","sig":null,"attributes":[{"value":"/ Lane-wise generalisation of `ComplexField` for SIMD complex fields.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_complex.rs","byte_start":116462,"byte_end":116534,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_complex.rs","byte_start":116535,"byte_end":116538,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Each lane of an SIMD complex field should contain one complex field.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_complex.rs","byte_start":116539,"byte_end":116611,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"allow(missing_docs)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_complex.rs","byte_start":116612,"byte_end":116634,"line_start":13,"line_end":13,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":464},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_complex.rs","byte_start":116971,"byte_end":116984,"line_start":32,"line_end":32,"column_start":10,"column_end":23},"name":"SimdRealField","qualname":"::simd::simd_complex::SimdComplexField::SimdRealField","value":"type SimdRealField: SimdRealField<SimdBool = <Self as SimdValue>::SimdBool>;","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Type of the coefficients of a complex number.\n","sig":null,"attributes":[{"value":"/ Type of the coefficients of a complex number.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_complex.rs","byte_start":116912,"byte_end":116961,"line_start":31,"line_end":31,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":525},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":122710,"byte_end":122720,"line_start":25,"line_end":25,"column_start":12,"column_end":22},"name":"SimdOption","qualname":"::simd::simd_option::SimdOption","value":"SimdOption {  }","parent":null,"children":[{"krate":0,"index":527},{"krate":0,"index":528}],"decl_id":null,"docs":" Generalization of Option for SIMD computation.\n","sig":null,"attributes":[{"value":"/ Generalization of Option for SIMD computation.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":122648,"byte_end":122698,"line_start":24,"line_end":24,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":122931,"byte_end":122934,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<SimdOption<V>>::new","value":"pub fn new(V, V::SimdBool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new SIMD option by combining a value and a mask indicating what lane of the value is valid.\n","sig":null,"attributes":[{"value":"/ Creates a new SIMD option by combining a value and a mask indicating what lane of the value is valid.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":122814,"byte_end":122919,"line_start":31,"line_end":31,"column_start":5,"column_end":110}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":123072,"byte_end":123076,"line_start":37,"line_end":37,"column_start":12,"column_end":16},"name":"mask","qualname":"<SimdOption<V>>::mask","value":"pub fn mask(&Self) -> V::SimdBool","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying SIMD boolean mask.\n","sig":null,"attributes":[{"value":"/ Return the underlying SIMD boolean mask.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":123016,"byte_end":123060,"line_start":36,"line_end":36,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":123185,"byte_end":123190,"line_start":42,"line_end":42,"column_start":12,"column_end":17},"name":"value","qualname":"<SimdOption<V>>::value","value":"pub fn value(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying unfiltered value.\n","sig":null,"attributes":[{"value":"/ Return the underlying unfiltered value.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":123130,"byte_end":123173,"line_start":41,"line_end":41,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":123459,"byte_end":123465,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"option","qualname":"<SimdOption<V>>::option","value":"pub fn option(Self) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Converts this SIMD option to a strandard Option.","sig":null,"attributes":[{"value":"/ Converts this SIMD option to a strandard Option.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":123235,"byte_end":123287,"line_start":46,"line_end":46,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":123292,"byte_end":123295,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ If all the bits of `self.mask` are 1, then this returns `Some(self.value())`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":123300,"byte_end":123381,"line_start":48,"line_end":48,"column_start":5,"column_end":86}},{"value":"/ If any bit of `self.mask` is 0, then this returns `None`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":123386,"byte_end":123447,"line_start":49,"line_end":49,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":123758,"byte_end":123769,"line_start":62,"line_end":62,"column_start":12,"column_end":23},"name":"simd_unwrap","qualname":"<SimdOption<V>>::simd_unwrap","value":"pub fn simd_unwrap(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying value if all the bits of `self.mask` are 1.","sig":null,"attributes":[{"value":"/ Retrieve the underlying value if all the bits of `self.mask` are 1.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":123598,"byte_end":123669,"line_start":58,"line_end":58,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":123674,"byte_end":123677,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ Panics if any of the bits of `self.mask` is 0.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":123682,"byte_end":123732,"line_start":60,"line_end":60,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":123737,"byte_end":123746,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":124479,"byte_end":124493,"line_start":78,"line_end":78,"column_start":12,"column_end":26},"name":"simd_unwrap_or","qualname":"<SimdOption<V>>::simd_unwrap_or","value":"pub fn simd_unwrap_or<impl FnOnce() -> V: FnOnce() ->\n                      V>(Self, impl FnOnce() -> V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Merges the value of `self` with the value of `other`.","sig":null,"attributes":[{"value":"/ Merges the value of `self` with the value of `other`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":123944,"byte_end":124001,"line_start":70,"line_end":70,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":124006,"byte_end":124009,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Each lane of the result with a corresponding bit mask set to 1 will be filled with the corresponding lanes of `self.value()`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":124014,"byte_end":124143,"line_start":72,"line_end":72,"column_start":5,"column_end":134}},{"value":"/ The lanes of the result with a corresponding bit mask set to 0 will be filled with the corresponding lanes of `other()`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":124148,"byte_end":124272,"line_start":73,"line_end":73,"column_start":5,"column_end":129}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":124277,"byte_end":124280,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ The function in `other` should not do any side-effect. Indeed, implementors of this trait are free to decide in what","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":124285,"byte_end":124405,"line_start":75,"line_end":75,"column_start":5,"column_end":125}},{"value":"/ cases `other` is called or not.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":124410,"byte_end":124445,"line_start":76,"line_end":76,"column_start":5,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":124450,"byte_end":124467,"line_start":77,"line_end":77,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":540},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":124701,"byte_end":124715,"line_start":4,"line_end":4,"column_start":11,"column_end":25},"name":"SimdPartialOrd","qualname":"::simd::simd_partial_ord::SimdPartialOrd","value":"SimdPartialOrd: SimdValue","parent":null,"children":[{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551}],"decl_id":null,"docs":" Lane-wise generalization of the standard `PartialOrd` for SIMD values.\n","sig":null,"attributes":[{"value":"/ Lane-wise generalization of the standard `PartialOrd` for SIMD values.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":124616,"byte_end":124690,"line_start":3,"line_end":3,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":124784,"byte_end":124791,"line_start":6,"line_end":6,"column_start":8,"column_end":15},"name":"simd_gt","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_gt","value":"pub fn simd_gt(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":540},"children":[],"decl_id":null,"docs":" Lanewise _greater than_ `>` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _greater than_ `>` comparison.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":124733,"byte_end":124776,"line_start":5,"line_end":5,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":124882,"byte_end":124889,"line_start":8,"line_end":8,"column_start":8,"column_end":15},"name":"simd_lt","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_lt","value":"pub fn simd_lt(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":540},"children":[],"decl_id":null,"docs":" Lanewise _less than_ `<` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _less than_ `<` comparison.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":124834,"byte_end":124874,"line_start":7,"line_end":7,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":124988,"byte_end":124995,"line_start":10,"line_end":10,"column_start":8,"column_end":15},"name":"simd_ge","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_ge","value":"pub fn simd_ge(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":540},"children":[],"decl_id":null,"docs":" Lanewise _greater or equal_ `>=` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _greater or equal_ `>=` comparison.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":124932,"byte_end":124980,"line_start":9,"line_end":9,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":125091,"byte_end":125098,"line_start":12,"line_end":12,"column_start":8,"column_end":15},"name":"simd_le","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_le","value":"pub fn simd_le(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":540},"children":[],"decl_id":null,"docs":" Lanewise _less or equal_ `<=` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _less or equal_ `<=` comparison.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":125038,"byte_end":125083,"line_start":11,"line_end":11,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":125186,"byte_end":125193,"line_start":14,"line_end":14,"column_start":8,"column_end":15},"name":"simd_eq","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_eq","value":"pub fn simd_eq(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":540},"children":[],"decl_id":null,"docs":" Lanewise _equal_ `==` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _equal_ `==` comparison.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":125141,"byte_end":125178,"line_start":13,"line_end":13,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":125285,"byte_end":125292,"line_start":16,"line_end":16,"column_start":8,"column_end":15},"name":"simd_ne","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_ne","value":"pub fn simd_ne(Self, Self) -> Self::SimdBool","parent":{"krate":0,"index":540},"children":[],"decl_id":null,"docs":" Lanewise _not equal_ `!=` comparison.\n","sig":null,"attributes":[{"value":"/ Lanewise _not equal_ `!=` comparison.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":125236,"byte_end":125277,"line_start":15,"line_end":15,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":125367,"byte_end":125375,"line_start":19,"line_end":19,"column_start":8,"column_end":16},"name":"simd_max","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_max","value":"pub fn simd_max(Self, Self) -> Self","parent":{"krate":0,"index":540},"children":[],"decl_id":null,"docs":" Lanewise max value.\n","sig":null,"attributes":[{"value":"/ Lanewise max value.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":125336,"byte_end":125359,"line_start":18,"line_end":18,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":125439,"byte_end":125447,"line_start":21,"line_end":21,"column_start":8,"column_end":16},"name":"simd_min","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_min","value":"pub fn simd_min(Self, Self) -> Self","parent":{"krate":0,"index":540},"children":[],"decl_id":null,"docs":" Lanewise min value.\n","sig":null,"attributes":[{"value":"/ Lanewise min value.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":125408,"byte_end":125431,"line_start":20,"line_end":20,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":125569,"byte_end":125579,"line_start":23,"line_end":23,"column_start":8,"column_end":18},"name":"simd_clamp","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_clamp","value":"pub fn simd_clamp(Self, Self, Self) -> Self","parent":{"krate":0,"index":540},"children":[],"decl_id":null,"docs":" Clamps each lane of `self` between the corresponding lane of `min` and `max`.\n","sig":null,"attributes":[{"value":"/ Clamps each lane of `self` between the corresponding lane of `min` and `max`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":125480,"byte_end":125561,"line_start":22,"line_end":22,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":125674,"byte_end":125693,"line_start":26,"line_end":26,"column_start":8,"column_end":27},"name":"simd_horizontal_min","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_horizontal_min","value":"pub fn simd_horizontal_min(Self) -> Self::Element","parent":{"krate":0,"index":540},"children":[],"decl_id":null,"docs":" The min value among all lanes of `self`.\n","sig":null,"attributes":[{"value":"/ The min value among all lanes of `self`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":125622,"byte_end":125666,"line_start":25,"line_end":25,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":125774,"byte_end":125793,"line_start":28,"line_end":28,"column_start":8,"column_end":27},"name":"simd_horizontal_max","qualname":"::simd::simd_partial_ord::SimdPartialOrd::simd_horizontal_max","value":"pub fn simd_horizontal_max(Self) -> Self::Element","parent":{"krate":0,"index":540},"children":[],"decl_id":null,"docs":" The max value among all lanes of `self`.\n","sig":null,"attributes":[{"value":"/ The max value among all lanes of `self`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":125722,"byte_end":125766,"line_start":27,"line_end":27,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":571},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":127635,"byte_end":127648,"line_start":9,"line_end":9,"column_start":11,"column_end":24},"name":"SimdRealField","qualname":"::simd::simd_real::SimdRealField","value":"SimdRealField: SimdPartialOrd + SimdSigned + SimdComplexField<SimdRealField = Self>","parent":null,"children":[{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589}],"decl_id":null,"docs":" Lanewise generalization of `RealField` for SIMD reals.","sig":null,"attributes":[{"value":"/ Lanewise generalization of `RealField` for SIMD reals.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":127362,"byte_end":127420,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":127421,"byte_end":127424,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Each lane of an SIMD real field should contain one real field.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":127425,"byte_end":127491,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ This is implemented by scalar reals like `f32` and `f64` as well as SIMD reals like `packed_simd::f32x4`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":127492,"byte_end":127601,"line_start":7,"line_end":7,"column_start":1,"column_end":110}},{"value":"allow(missing_docs)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":127602,"byte_end":127624,"line_start":8,"line_end":8,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":127932,"byte_end":127945,"line_start":16,"line_end":16,"column_start":8,"column_end":21},"name":"simd_copysign","qualname":"::simd::simd_real::SimdRealField::simd_copysign","value":"pub fn simd_copysign(Self, Self) -> Self","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":" Copies the sign of `self` to `to`.","sig":null,"attributes":[{"value":"/ Copies the sign of `self` to `to`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":127729,"byte_end":127767,"line_start":12,"line_end":12,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":127772,"byte_end":127775,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ - Returns `to.simd_abs()` if `self` is positive or positive-zero.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":127780,"byte_end":127849,"line_start":14,"line_end":14,"column_start":5,"column_end":74}},{"value":"/ - Returns `-to.simd_abs()` if `self` is negative or negative-zero.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":127854,"byte_end":127924,"line_start":15,"line_end":15,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":127978,"byte_end":127988,"line_start":17,"line_end":17,"column_start":8,"column_end":18},"name":"simd_atan2","qualname":"::simd::simd_real::SimdRealField::simd_atan2","value":"pub fn simd_atan2(Self, Self) -> Self","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":128025,"byte_end":128045,"line_start":19,"line_end":19,"column_start":8,"column_end":28},"name":"simd_default_epsilon","qualname":"::simd::simd_real::SimdRealField::simd_default_epsilon","value":"pub fn simd_default_epsilon() -> Self","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":128064,"byte_end":128071,"line_start":20,"line_end":20,"column_start":8,"column_end":15},"name":"simd_pi","qualname":"::simd::simd_real::SimdRealField::simd_pi","value":"pub fn simd_pi() -> Self","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":128090,"byte_end":128101,"line_start":21,"line_end":21,"column_start":8,"column_end":19},"name":"simd_two_pi","qualname":"::simd::simd_real::SimdRealField::simd_two_pi","value":"pub fn simd_two_pi() -> Self","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":128120,"byte_end":128134,"line_start":22,"line_end":22,"column_start":8,"column_end":22},"name":"simd_frac_pi_2","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_2","value":"pub fn simd_frac_pi_2() -> Self","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":128153,"byte_end":128167,"line_start":23,"line_end":23,"column_start":8,"column_end":22},"name":"simd_frac_pi_3","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_3","value":"pub fn simd_frac_pi_3() -> Self","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":128186,"byte_end":128200,"line_start":24,"line_end":24,"column_start":8,"column_end":22},"name":"simd_frac_pi_4","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_4","value":"pub fn simd_frac_pi_4() -> Self","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":128219,"byte_end":128233,"line_start":25,"line_end":25,"column_start":8,"column_end":22},"name":"simd_frac_pi_6","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_6","value":"pub fn simd_frac_pi_6() -> Self","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":128252,"byte_end":128266,"line_start":26,"line_end":26,"column_start":8,"column_end":22},"name":"simd_frac_pi_8","qualname":"::simd::simd_real::SimdRealField::simd_frac_pi_8","value":"pub fn simd_frac_pi_8() -> Self","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":128285,"byte_end":128299,"line_start":27,"line_end":27,"column_start":8,"column_end":22},"name":"simd_frac_1_pi","qualname":"::simd::simd_real::SimdRealField::simd_frac_1_pi","value":"pub fn simd_frac_1_pi() -> Self","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":128318,"byte_end":128332,"line_start":28,"line_end":28,"column_start":8,"column_end":22},"name":"simd_frac_2_pi","qualname":"::simd::simd_real::SimdRealField::simd_frac_2_pi","value":"pub fn simd_frac_2_pi() -> Self","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":128351,"byte_end":128370,"line_start":29,"line_end":29,"column_start":8,"column_end":27},"name":"simd_frac_2_sqrt_pi","qualname":"::simd::simd_real::SimdRealField::simd_frac_2_sqrt_pi","value":"pub fn simd_frac_2_sqrt_pi() -> Self","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":128390,"byte_end":128396,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"simd_e","qualname":"::simd::simd_real::SimdRealField::simd_e","value":"pub fn simd_e() -> Self","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":128415,"byte_end":128426,"line_start":32,"line_end":32,"column_start":8,"column_end":19},"name":"simd_log2_e","qualname":"::simd::simd_real::SimdRealField::simd_log2_e","value":"pub fn simd_log2_e() -> Self","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":128445,"byte_end":128457,"line_start":33,"line_end":33,"column_start":8,"column_end":20},"name":"simd_log10_e","qualname":"::simd::simd_real::SimdRealField::simd_log10_e","value":"pub fn simd_log10_e() -> Self","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":128476,"byte_end":128485,"line_start":34,"line_end":34,"column_start":8,"column_end":17},"name":"simd_ln_2","qualname":"::simd::simd_real::SimdRealField::simd_ln_2","value":"pub fn simd_ln_2() -> Self","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":128504,"byte_end":128514,"line_start":35,"line_end":35,"column_start":8,"column_end":18},"name":"simd_ln_10","qualname":"::simd::simd_real::SimdRealField::simd_ln_10","value":"pub fn simd_ln_10() -> Self","parent":{"krate":0,"index":571},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":613},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_signed.rs","byte_start":130363,"byte_end":130373,"line_start":5,"line_end":5,"column_start":11,"column_end":21},"name":"SimdSigned","qualname":"::simd::simd_signed::SimdSigned","value":"SimdSigned: SimdValue","parent":null,"children":[{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618}],"decl_id":null,"docs":" A lane-wise generalization of [`num::Signed`](https://rust-num.github.io/num/num/trait.Signed.html) for SIMD values.\n","sig":null,"attributes":[{"value":"/ A lane-wise generalization of [`num::Signed`](https://rust-num.github.io/num/num/trait.Signed.html) for SIMD values.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_signed.rs","byte_start":130232,"byte_end":130352,"line_start":4,"line_end":4,"column_start":1,"column_end":121}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_signed.rs","byte_start":130445,"byte_end":130453,"line_start":7,"line_end":7,"column_start":8,"column_end":16},"name":"simd_abs","qualname":"::simd::simd_signed::SimdSigned::simd_abs","value":"pub fn simd_abs(&Self) -> Self","parent":{"krate":0,"index":613},"children":[],"decl_id":null,"docs":" The absolute value of each lane of `self`.\n","sig":null,"attributes":[{"value":"/ The absolute value of each lane of `self`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_signed.rs","byte_start":130391,"byte_end":130437,"line_start":6,"line_end":6,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_signed.rs","byte_start":130744,"byte_end":130756,"line_start":12,"line_end":12,"column_start":8,"column_end":20},"name":"simd_abs_sub","qualname":"::simd::simd_signed::SimdSigned::simd_abs_sub","value":"pub fn simd_abs_sub(&Self, &Self) -> Self","parent":{"krate":0,"index":613},"children":[],"decl_id":null,"docs":" The absolute difference of each lane of `self`.","sig":null,"attributes":[{"value":"/ The absolute difference of each lane of `self`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_signed.rs","byte_start":130474,"byte_end":130525,"line_start":8,"line_end":8,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_signed.rs","byte_start":130530,"byte_end":130533,"line_start":9,"line_end":9,"column_start":5,"column_end":8}},{"value":"/ For each lane, this zero if the lane of self is less than or equal to the corresponding lane of other","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_signed.rs","byte_start":130538,"byte_end":130643,"line_start":10,"line_end":10,"column_start":5,"column_end":110}},{"value":"/ otherwise the difference between the lane of self and the lane of other is returned.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_signed.rs","byte_start":130648,"byte_end":130736,"line_start":11,"line_end":11,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_signed.rs","byte_start":130837,"byte_end":130848,"line_start":14,"line_end":14,"column_start":8,"column_end":19},"name":"simd_signum","qualname":"::simd::simd_signed::SimdSigned::simd_signum","value":"pub fn simd_signum(&Self) -> Self","parent":{"krate":0,"index":613},"children":[],"decl_id":null,"docs":" The signum of each lane of `Self`.\n","sig":null,"attributes":[{"value":"/ The signum of each lane of `Self`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_signed.rs","byte_start":130791,"byte_end":130829,"line_start":13,"line_end":13,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_signed.rs","byte_start":130910,"byte_end":130926,"line_start":16,"line_end":16,"column_start":8,"column_end":24},"name":"is_simd_positive","qualname":"::simd::simd_signed::SimdSigned::is_simd_positive","value":"pub fn is_simd_positive(&Self) -> Self::SimdBool","parent":{"krate":0,"index":613},"children":[],"decl_id":null,"docs":" Tests which lane is positive.\n","sig":null,"attributes":[{"value":"/ Tests which lane is positive.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_signed.rs","byte_start":130869,"byte_end":130902,"line_start":15,"line_end":15,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_signed.rs","byte_start":130998,"byte_end":131014,"line_start":18,"line_end":18,"column_start":8,"column_end":24},"name":"is_simd_negative","qualname":"::simd::simd_signed::SimdSigned::is_simd_negative","value":"pub fn is_simd_negative(&Self) -> Self::SimdBool","parent":{"krate":0,"index":613},"children":[],"decl_id":null,"docs":" Tests which lane is negative.\n","sig":null,"attributes":[{"value":"/ Tests which lane is negative.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_signed.rs","byte_start":130957,"byte_end":130990,"line_start":17,"line_end":17,"column_start":5,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":628},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":131675,"byte_end":131684,"line_start":4,"line_end":4,"column_start":11,"column_end":20},"name":"SimdValue","qualname":"::simd::simd_value::SimdValue","value":"SimdValue: Sized","parent":null,"children":[{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":640}],"decl_id":null,"docs":" Base trait for every SIMD types.\n","sig":null,"attributes":[{"value":"/ Base trait for every SIMD types.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":131628,"byte_end":131664,"line_start":3,"line_end":3,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":629},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":131769,"byte_end":131776,"line_start":6,"line_end":6,"column_start":10,"column_end":17},"name":"Element","qualname":"::simd::simd_value::SimdValue::Element","value":"type Element: SimdValue<Element = Self::Element, SimdBool = bool>;","parent":{"krate":0,"index":628},"children":[],"decl_id":null,"docs":" The type of the elements of each lane of this SIMD value.\n","sig":null,"attributes":[{"value":"/ The type of the elements of each lane of this SIMD value.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":131698,"byte_end":131759,"line_start":5,"line_end":5,"column_start":5,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":630},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":131909,"byte_end":131917,"line_start":8,"line_end":8,"column_start":10,"column_end":18},"name":"SimdBool","qualname":"::simd::simd_value::SimdValue::SimdBool","value":"type SimdBool: SimdBool;","parent":{"krate":0,"index":628},"children":[],"decl_id":null,"docs":" Type of the result of comparing two SIMD values like `self`.\n","sig":null,"attributes":[{"value":"/ Type of the result of comparing two SIMD values like `self`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":131835,"byte_end":131899,"line_start":7,"line_end":7,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":131985,"byte_end":131990,"line_start":11,"line_end":11,"column_start":8,"column_end":13},"name":"lanes","qualname":"::simd::simd_value::SimdValue::lanes","value":"pub fn lanes() -> usize","parent":{"krate":0,"index":628},"children":[],"decl_id":null,"docs":" The number of lanes of this SIMD value.\n","sig":null,"attributes":[{"value":"/ The number of lanes of this SIMD value.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":131934,"byte_end":131977,"line_start":10,"line_end":10,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":132074,"byte_end":132079,"line_start":13,"line_end":13,"column_start":8,"column_end":13},"name":"splat","qualname":"::simd::simd_value::SimdValue::splat","value":"pub fn splat(Self::Element) -> Self","parent":{"krate":0,"index":628},"children":[],"decl_id":null,"docs":" Initializes an SIMD value with each lanes set to `val`.\n","sig":null,"attributes":[{"value":"/ Initializes an SIMD value with each lanes set to `val`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":132007,"byte_end":132066,"line_start":12,"line_end":12,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":132206,"byte_end":132213,"line_start":17,"line_end":17,"column_start":8,"column_end":15},"name":"extract","qualname":"::simd::simd_value::SimdValue::extract","value":"pub fn extract(&Self, usize) -> Self::Element","parent":{"krate":0,"index":628},"children":[],"decl_id":null,"docs":" Extracts the i-th lane of `self`.","sig":null,"attributes":[{"value":"/ Extracts the i-th lane of `self`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":132113,"byte_end":132150,"line_start":14,"line_end":14,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":132155,"byte_end":132158,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ Panics if `i >= Self::lanes()`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":132163,"byte_end":132198,"line_start":16,"line_end":16,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":132328,"byte_end":132345,"line_start":19,"line_end":19,"column_start":15,"column_end":32},"name":"extract_unchecked","qualname":"::simd::simd_value::SimdValue::extract_unchecked","value":"pub unsafe fn extract_unchecked(&Self, usize) -> Self::Element","parent":{"krate":0,"index":628},"children":[],"decl_id":null,"docs":" Extracts the i-th lane of `self` without bound-checking.\n","sig":null,"attributes":[{"value":"/ Extracts the i-th lane of `self` without bound-checking.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":132253,"byte_end":132313,"line_start":18,"line_end":18,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":132487,"byte_end":132494,"line_start":23,"line_end":23,"column_start":8,"column_end":15},"name":"replace","qualname":"::simd::simd_value::SimdValue::replace","value":"pub fn replace(&mut Self, usize, Self::Element)","parent":{"krate":0,"index":628},"children":[],"decl_id":null,"docs":" Replaces the i-th lane of `self` by `val`.","sig":null,"attributes":[{"value":"/ Replaces the i-th lane of `self` by `val`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":132385,"byte_end":132431,"line_start":20,"line_end":20,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":132436,"byte_end":132439,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Panics if `i >= Self::lanes()`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":132444,"byte_end":132479,"line_start":22,"line_end":22,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":132625,"byte_end":132642,"line_start":25,"line_end":25,"column_start":15,"column_end":32},"name":"replace_unchecked","qualname":"::simd::simd_value::SimdValue::replace_unchecked","value":"pub unsafe fn replace_unchecked(&mut Self, usize, Self::Element)","parent":{"krate":0,"index":628},"children":[],"decl_id":null,"docs":" Replaces the i-th lane of `self` by `val` without bound-checking.\n","sig":null,"attributes":[{"value":"/ Replaces the i-th lane of `self` by `val` without bound-checking.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":132541,"byte_end":132610,"line_start":24,"line_end":24,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":132992,"byte_end":132998,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"select","qualname":"::simd::simd_value::SimdValue::select","value":"pub fn select(Self, Self::SimdBool, Self) -> Self","parent":{"krate":0,"index":628},"children":[],"decl_id":null,"docs":" Merges `self` and `other` depending on the lanes of `cond`.","sig":null,"attributes":[{"value":"/ Merges `self` and `other` depending on the lanes of `cond`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":132690,"byte_end":132753,"line_start":27,"line_end":27,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":132758,"byte_end":132761,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ For each lane of `cond` with bits set to 1, the result's will contain the value of the lane of `self`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":132766,"byte_end":132872,"line_start":29,"line_end":29,"column_start":5,"column_end":111}},{"value":"/ For each lane of `cond` with bits set to 0, the result's will contain the value of the lane of `other`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":132877,"byte_end":132984,"line_start":30,"line_end":30,"column_start":5,"column_end":112}}]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":133324,"byte_end":133333,"line_start":39,"line_end":39,"column_start":8,"column_end":17},"name":"map_lanes","qualname":"::simd::simd_value::SimdValue::map_lanes","value":"pub fn map_lanes<impl Fn(Self::Element) -> Self::Element: Fn(Self::Element) ->\n                 Self::Element>(Self, impl Fn(Self::Element) -> Self::Element)\n-> Self where Self: Clone","parent":{"krate":0,"index":628},"children":[],"decl_id":null,"docs":" Applies a function to each lane of `self`.","sig":null,"attributes":[{"value":"/ Applies a function to each lane of `self`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":133054,"byte_end":133100,"line_start":33,"line_end":33,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":133105,"byte_end":133108,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ Note that, while convenient, this method can be extremely slow as this","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":133113,"byte_end":133187,"line_start":35,"line_end":35,"column_start":5,"column_end":79}},{"value":"/ requires to extract each lane of `self` and then combine them again into","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":133192,"byte_end":133268,"line_start":36,"line_end":36,"column_start":5,"column_end":81}},{"value":"/ a new SIMD value.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":133273,"byte_end":133294,"line_start":37,"line_end":37,"column_start":5,"column_end":26}},{"value":"inline(always)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":133299,"byte_end":133316,"line_start":38,"line_end":38,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":133935,"byte_end":133948,"line_start":58,"line_end":58,"column_start":8,"column_end":21},"name":"zip_map_lanes","qualname":"::simd::simd_value::SimdValue::zip_map_lanes","value":"pub fn zip_map_lanes<impl Fn(Self::Element, Self::Element) -> Self::Element: Fn(Self::Element,\n                                                                                Self::Element)\n                     ->\n                     Self::Element>(Self, Self,\n                                    impl Fn(Self::Element, Self::Element) -> Self::Element)\n-> Self where Self: Clone","parent":{"krate":0,"index":628},"children":[],"decl_id":null,"docs":" Applies a function to each lane of `self` paired with the corresponding lane of `b`.","sig":null,"attributes":[{"value":"/ Applies a function to each lane of `self` paired with the corresponding lane of `b`.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":133623,"byte_end":133711,"line_start":52,"line_end":52,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":133716,"byte_end":133719,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ Note that, while convenient, this method can be extremely slow as this","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":133724,"byte_end":133798,"line_start":54,"line_end":54,"column_start":5,"column_end":79}},{"value":"/ requires to extract each lane of `self` and then combine them again into","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":133803,"byte_end":133879,"line_start":55,"line_end":55,"column_start":5,"column_end":81}},{"value":"/ a new SIMD value.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":133884,"byte_end":133905,"line_start":56,"line_end":56,"column_start":5,"column_end":26}},{"value":"inline(always)","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":133910,"byte_end":133927,"line_start":57,"line_end":57,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":642},"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":134768,"byte_end":134786,"line_start":86,"line_end":86,"column_start":11,"column_end":29},"name":"PrimitiveSimdValue","qualname":"::simd::simd_value::PrimitiveSimdValue","value":"PrimitiveSimdValue: Copy + SimdValue","parent":null,"children":[],"decl_id":null,"docs":" Marker trait implemented by SIMD and non-SIMD primitive numeric values.","sig":null,"attributes":[{"value":"/ Marker trait implemented by SIMD and non-SIMD primitive numeric values.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":134397,"byte_end":134472,"line_start":80,"line_end":80,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":134473,"byte_end":134476,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ This trait is useful for some disambiguations when writing blanked impls.","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":134477,"byte_end":134554,"line_start":82,"line_end":82,"column_start":1,"column_end":78}},{"value":"/ This is implemented by all unsigned integer, integer, float, and complex types, as","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":134555,"byte_end":134641,"line_start":83,"line_end":83,"column_start":1,"column_end":87}},{"value":"/ with only one lane, i.e., `f32`, `f64`, `u32`, `i64`, etc. as well as SIMD types like","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":134642,"byte_end":134731,"line_start":84,"line_end":84,"column_start":1,"column_end":90}},{"value":"/ `f32x4, i32x8`, etc..","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":134732,"byte_end":134757,"line_start":85,"line_end":85,"column_start":1,"column_end":26}}]}],"impls":[{"id":4,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","byte_start":31879,"byte_end":31886,"line_start":1036,"line_end":1036,"column_start":63,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44966,"byte_end":44967,"line_start":20,"line_end":20,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":45058,"byte_end":45059,"line_start":21,"line_end":21,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":45150,"byte_end":45151,"line_start":22,"line_end":22,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":45242,"byte_end":45243,"line_start":23,"line_end":23,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":45320,"byte_end":45321,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":45547,"byte_end":45554,"line_start":29,"line_end":29,"column_start":75,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":49822,"byte_end":49824,"line_start":87,"line_end":87,"column_start":47,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":52040,"byte_end":52047,"line_start":169,"line_end":169,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_complex.rs","byte_start":117189,"byte_end":117190,"line_start":37,"line_end":37,"column_start":44,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Inherent","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":122794,"byte_end":122804,"line_start":30,"line_end":30,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":125902,"byte_end":125903,"line_start":31,"line_end":31,"column_start":82,"column_end":83},"value":"","parent":null,"children":[{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":128609,"byte_end":128610,"line_start":39,"line_end":39,"column_start":38,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_signed.rs","byte_start":131104,"byte_end":131105,"line_start":21,"line_end":21,"column_start":61,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":134855,"byte_end":134862,"line_start":88,"line_end":88,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":136285,"byte_end":136292,"line_start":142,"line_end":142,"column_start":65,"column_end":72},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","byte_start":2009,"byte_end":2015,"line_start":41,"line_end":41,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/lib.rs","byte_start":2025,"byte_end":2029,"line_start":42,"line_end":42,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":201}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":2832,"byte_end":2844,"line_start":16,"line_end":16,"column_start":5,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":72},"to":{"krate":0,"index":28}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":2869,"byte_end":2879,"line_start":17,"line_end":17,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":19,"index":56},"to":{"krate":0,"index":28}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":2902,"byte_end":2908,"line_start":18,"line_end":18,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":19,"index":92},"to":{"krate":0,"index":28}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":2931,"byte_end":2937,"line_start":19,"line_end":19,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":18,"index":590},"to":{"krate":0,"index":28}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":2944,"byte_end":2951,"line_start":20,"line_end":20,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":18,"index":92},"to":{"krate":0,"index":28}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/real.rs","byte_start":2958,"byte_end":2968,"line_start":21,"line_end":21,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":1833},"to":{"krate":0,"index":28}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","byte_start":14525,"byte_end":14533,"line_start":163,"line_end":163,"column_start":5,"column_end":13},"kind":"SuperTrait","from":{"krate":0,"index":174},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","byte_start":14546,"byte_end":14556,"line_start":164,"line_end":164,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":180},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","byte_start":14568,"byte_end":14573,"line_start":165,"line_end":165,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":0,"index":167},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","byte_start":14613,"byte_end":14617,"line_start":166,"line_end":166,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":2081},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","byte_start":14624,"byte_end":14627,"line_start":167,"line_end":167,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2163},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","byte_start":14697,"byte_end":14701,"line_start":170,"line_end":170,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":2071},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","byte_start":14708,"byte_end":14712,"line_start":171,"line_end":171,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":2083},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","byte_start":14719,"byte_end":14722,"line_start":172,"line_end":172,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2603},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","byte_start":14743,"byte_end":14748,"line_start":174,"line_end":174,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":6831},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","byte_start":14755,"byte_end":14768,"line_start":175,"line_end":175,"column_start":7,"column_end":20},"kind":"SuperTrait","from":{"krate":18,"index":150},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","byte_start":14775,"byte_end":14782,"line_start":176,"line_end":176,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":2,"index":6836},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/complex.rs","byte_start":31879,"byte_end":31886,"line_start":1036,"line_end":1036,"column_start":63,"column_end":70},"kind":{"Impl":{"id":4}},"from":{"krate":20,"index":471},"to":{"krate":0,"index":72}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44265,"byte_end":44270,"line_start":6,"line_end":6,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":2076},"to":{"krate":0,"index":144}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44273,"byte_end":44276,"line_start":6,"line_end":6,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":2136},"to":{"krate":0,"index":144}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44301,"byte_end":44310,"line_start":6,"line_end":6,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":2167},"to":{"krate":0,"index":144}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44431,"byte_end":44436,"line_start":9,"line_end":9,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":2076},"to":{"krate":0,"index":146}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44439,"byte_end":44442,"line_start":9,"line_end":9,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":2141},"to":{"krate":0,"index":146}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44467,"byte_end":44476,"line_start":9,"line_end":9,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":2171},"to":{"krate":0,"index":146}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44597,"byte_end":44602,"line_start":12,"line_end":12,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":2076},"to":{"krate":0,"index":148}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44605,"byte_end":44608,"line_start":12,"line_end":12,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":2146},"to":{"krate":0,"index":148}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44633,"byte_end":44642,"line_start":12,"line_end":12,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":2175},"to":{"krate":0,"index":148}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44763,"byte_end":44768,"line_start":15,"line_end":15,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":2076},"to":{"krate":0,"index":150}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44771,"byte_end":44774,"line_start":15,"line_end":15,"column_start":44,"column_end":47},"kind":"SuperTrait","from":{"krate":2,"index":2151},"to":{"krate":0,"index":150}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44799,"byte_end":44808,"line_start":15,"line_end":15,"column_start":72,"column_end":81},"kind":"SuperTrait","from":{"krate":2,"index":2179},"to":{"krate":0,"index":150}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44899,"byte_end":44904,"line_start":18,"line_end":18,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":2076},"to":{"krate":0,"index":152}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44907,"byte_end":44910,"line_start":18,"line_end":18,"column_start":30,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":2163},"to":{"krate":0,"index":152}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":44966,"byte_end":44967,"line_start":20,"line_end":20,"column_start":37,"column_end":38},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":154},"to":{"krate":0,"index":144}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":45058,"byte_end":45059,"line_start":21,"line_end":21,"column_start":37,"column_end":38},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":157},"to":{"krate":0,"index":146}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":45150,"byte_end":45151,"line_start":22,"line_end":22,"column_start":37,"column_end":38},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":160},"to":{"krate":0,"index":148}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":45242,"byte_end":45243,"line_start":23,"line_end":23,"column_start":37,"column_end":38},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":163},"to":{"krate":0,"index":150}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":45320,"byte_end":45321,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":166},"to":{"krate":0,"index":152}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":45435,"byte_end":45444,"line_start":27,"line_end":27,"column_start":18,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":628},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":45447,"byte_end":45456,"line_start":27,"line_end":27,"column_start":30,"column_end":39},"kind":"SuperTrait","from":{"krate":18,"index":642},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":45459,"byte_end":45468,"line_start":27,"line_end":27,"column_start":42,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":152},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/field.rs","byte_start":45547,"byte_end":45554,"line_start":29,"line_end":29,"column_start":75,"column_end":82},"kind":{"Impl":{"id":10}},"from":{"krate":20,"index":471},"to":{"krate":0,"index":167}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":47031,"byte_end":47036,"line_start":24,"line_end":24,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":2076},"to":{"krate":0,"index":174}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":49010,"byte_end":49015,"line_start":64,"line_end":64,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":2076},"to":{"krate":0,"index":180}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":49822,"byte_end":49824,"line_start":87,"line_end":87,"column_start":47,"column_end":49},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":188},"to":{"krate":0,"index":180}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/scalar/subset.rs","byte_start":52040,"byte_end":52047,"line_start":169,"line_end":169,"column_start":56,"column_end":63},"kind":{"Impl":{"id":150}},"from":{"krate":20,"index":471},"to":{"krate":0,"index":174}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/auto_simd_impl.rs","byte_start":110033,"byte_end":110042,"line_start":1604,"line_end":1604,"column_start":21,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":628},"to":{"krate":0,"index":376}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111011,"byte_end":111015,"line_start":10,"line_end":10,"column_start":5,"column_end":9},"kind":"SuperTrait","from":{"krate":2,"index":2081},"to":{"krate":0,"index":394}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111022,"byte_end":111028,"line_start":11,"line_end":11,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":2,"index":2192},"to":{"krate":0,"index":394}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111056,"byte_end":111061,"line_start":12,"line_end":12,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":2197},"to":{"krate":0,"index":394}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111089,"byte_end":111095,"line_start":13,"line_end":13,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":2,"index":2202},"to":{"krate":0,"index":394}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_bool.rs","byte_start":111123,"byte_end":111126,"line_start":14,"line_end":14,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2188},"to":{"krate":0,"index":394}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_complex.rs","byte_start":116667,"byte_end":116675,"line_start":15,"line_end":15,"column_start":5,"column_end":13},"kind":"SuperTrait","from":{"krate":0,"index":174},"to":{"krate":0,"index":463}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_complex.rs","byte_start":116688,"byte_end":116698,"line_start":16,"line_end":16,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":180},"to":{"krate":0,"index":463}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_complex.rs","byte_start":116710,"byte_end":116715,"line_start":17,"line_end":17,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":0,"index":167},"to":{"krate":0,"index":463}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_complex.rs","byte_start":116722,"byte_end":116726,"line_start":18,"line_end":18,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":2081},"to":{"krate":0,"index":463}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_complex.rs","byte_start":116733,"byte_end":116736,"line_start":19,"line_end":19,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2163},"to":{"krate":0,"index":463}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_complex.rs","byte_start":116806,"byte_end":116810,"line_start":22,"line_end":22,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":2071},"to":{"krate":0,"index":463}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_complex.rs","byte_start":116817,"byte_end":116821,"line_start":23,"line_end":23,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":2083},"to":{"krate":0,"index":463}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_complex.rs","byte_start":116828,"byte_end":116831,"line_start":24,"line_end":24,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2603},"to":{"krate":0,"index":463}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_complex.rs","byte_start":116852,"byte_end":116857,"line_start":26,"line_end":26,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":6831},"to":{"krate":0,"index":463}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_complex.rs","byte_start":116864,"byte_end":116876,"line_start":27,"line_end":27,"column_start":7,"column_end":19},"kind":"SuperTrait","from":{"krate":18,"index":637},"to":{"krate":0,"index":463}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_complex.rs","byte_start":116883,"byte_end":116889,"line_start":28,"line_end":28,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":18,"index":618},"to":{"krate":0,"index":463}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_complex.rs","byte_start":116896,"byte_end":116905,"line_start":29,"line_end":29,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":2,"index":1790},"to":{"krate":0,"index":463}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_complex.rs","byte_start":117189,"byte_end":117190,"line_start":37,"line_end":37,"column_start":44,"column_end":45},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":466},"to":{"krate":0,"index":463}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_option.rs","byte_start":122794,"byte_end":122804,"line_start":30,"line_end":30,"column_start":20,"column_end":30},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":525},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":124717,"byte_end":124726,"line_start":4,"line_end":4,"column_start":27,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":628},"to":{"krate":0,"index":540}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_partial_ord.rs","byte_start":125902,"byte_end":125903,"line_start":31,"line_end":31,"column_start":82,"column_end":83},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":553},"to":{"krate":0,"index":540}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":127654,"byte_end":127668,"line_start":10,"line_end":10,"column_start":5,"column_end":19},"kind":"SuperTrait","from":{"krate":0,"index":540},"to":{"krate":0,"index":571}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":127671,"byte_end":127681,"line_start":10,"line_end":10,"column_start":22,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":613},"to":{"krate":0,"index":571}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":127684,"byte_end":127700,"line_start":10,"line_end":10,"column_start":35,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":463},"to":{"krate":0,"index":571}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_real.rs","byte_start":128609,"byte_end":128610,"line_start":39,"line_end":39,"column_start":38,"column_end":39},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":591},"to":{"krate":0,"index":571}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_signed.rs","byte_start":130375,"byte_end":130384,"line_start":5,"line_end":5,"column_start":23,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":628},"to":{"krate":0,"index":613}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_signed.rs","byte_start":131104,"byte_end":131105,"line_start":21,"line_end":21,"column_start":61,"column_end":62},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":620},"to":{"krate":0,"index":613}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":131686,"byte_end":131691,"line_start":4,"line_end":4,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":2076},"to":{"krate":0,"index":628}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":134788,"byte_end":134792,"line_start":86,"line_end":86,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2081},"to":{"krate":0,"index":642}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":134795,"byte_end":134804,"line_start":86,"line_end":86,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":628},"to":{"krate":0,"index":642}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":134855,"byte_end":134862,"line_start":88,"line_end":88,"column_start":47,"column_end":54},"kind":{"Impl":{"id":169}},"from":{"krate":20,"index":471},"to":{"krate":0,"index":628}},{"span":{"file_name":"/home/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/simba-0.2.4/src/simd/simd_value.rs","byte_start":136285,"byte_end":136292,"line_start":142,"line_end":142,"column_start":65,"column_end":72},"kind":{"Impl":{"id":170}},"from":{"krate":20,"index":471},"to":{"krate":0,"index":642}}]}