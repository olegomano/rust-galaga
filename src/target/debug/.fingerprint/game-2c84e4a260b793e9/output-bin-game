{"message":"failed to resolve: use of undeclared crate or module `emscripten_main_loop`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/oleg/Documents/dev/galaga/src/render/src/window_instance.rs","byte_start":1382,"byte_end":1402,"line_start":50,"line_end":50,"column_start":17,"column_end":37,"is_primary":true,"text":[{"text":"                emscripten_main_loop::run( self );","highlight_start":17,"highlight_end":37}],"label":"use of undeclared crate or module `emscripten_main_loop`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"game/src/main.rs","byte_start":390,"byte_end":411,"line_start":28,"line_end":28,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"render::Build!(Game);","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"render::Build!","def_site_span":{"file_name":"/home/oleg/Documents/dev/galaga/src/render/src/window_instance.rs","byte_start":88,"byte_end":2022,"line_start":7,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! Build {","highlight_start":1,"highlight_end":21},{"text":"    ($type_name:ty) => {","highlight_start":1,"highlight_end":25},{"text":"        struct WindowInstance {","highlight_start":1,"highlight_end":32},{"text":"            this : *mut WindowInstance,","highlight_start":1,"highlight_end":40},{"text":"            sdl  : window::SDLContext,","highlight_start":1,"highlight_end":39},{"text":"         //   instance : type_name,","highlight_start":1,"highlight_end":36},{"text":"            _pin : PhantomPinned,","highlight_start":1,"highlight_end":34},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl WindowInstance{","highlight_start":1,"highlight_end":29},{"text":"            fn OnFrame(&mut self){","highlight_start":1,"highlight_end":35},{"text":"                unsafe{","highlight_start":1,"highlight_end":24},{"text":"                    //self.sdl.update(mut self.this, mut self.this);","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        struct Window{","highlight_start":1,"highlight_end":23},{"text":"            instance : Pin<Box<WindowInstance>>,","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl Window{","highlight_start":1,"highlight_end":21},{"text":"            fn new() -> Self{","highlight_start":1,"highlight_end":30},{"text":"                let mut instance : WindowInstance = WindowInstance{","highlight_start":1,"highlight_end":68},{"text":"                    this : std::ptr::null_mut(),","highlight_start":1,"highlight_end":49},{"text":"                    sdl  : window::SDLContext::new(),","highlight_start":1,"highlight_end":54},{"text":"           //        instance : type_name::new(),","highlight_start":1,"highlight_end":50},{"text":"                    _pin : PhantomPinned,","highlight_start":1,"highlight_end":42},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut boxed = Box::pin(instance);","highlight_start":1,"highlight_end":52},{"text":"                unsafe{","highlight_start":1,"highlight_end":24},{"text":"                    let mut_ref = Pin::as_mut(&mut boxed);","highlight_start":1,"highlight_end":59},{"text":"                    let ptr = Pin::get_unchecked_mut(mut_ref);","highlight_start":1,"highlight_end":63},{"text":"                    (*ptr).this = ptr;","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                return Self{","highlight_start":1,"highlight_end":29},{"text":"                    instance : boxed","highlight_start":1,"highlight_end":37},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn Display(&mut self){","highlight_start":1,"highlight_end":35},{"text":"                emscripten_main_loop::run( self );","highlight_start":1,"highlight_end":51},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn Instance(&mut self) -> &mut WindowInstance{","highlight_start":1,"highlight_end":59},{"text":"                unsafe{","highlight_start":1,"highlight_end":24},{"text":"                    let mut_ref = Pin::as_mut(&mut self.instance);","highlight_start":1,"highlight_end":67},{"text":"                    let ptr  = Pin::get_unchecked_mut(mut_ref);","highlight_start":1,"highlight_end":64},{"text":"                    return ptr;","highlight_start":1,"highlight_end":32},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl emscripten_main_loop::MainLoop for WindowInstance {","highlight_start":1,"highlight_end":65},{"text":"            fn main_loop(&mut self) -> emscripten_main_loop::MainLoopEvent {","highlight_start":1,"highlight_end":77},{"text":"                self.Instance().OnFrame();","highlight_start":1,"highlight_end":43},{"text":"                return emscripten_main_loop::MainLoopEvent::Continue;     ","highlight_start":1,"highlight_end":75},{"text":"            }       ","highlight_start":1,"highlight_end":21},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"   ","highlight_start":1,"highlight_end":4},{"text":"   }","highlight_start":1,"highlight_end":5},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `emscripten_main_loop`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mgame/src/main.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mrender::Build!(Game);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `emscripten_main_loop`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared crate or module `emscripten_main_loop`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/oleg/Documents/dev/galaga/src/render/src/window_instance.rs","byte_start":1734,"byte_end":1754,"line_start":62,"line_end":62,"column_start":14,"column_end":34,"is_primary":true,"text":[{"text":"        impl emscripten_main_loop::MainLoop for WindowInstance {","highlight_start":14,"highlight_end":34}],"label":"use of undeclared crate or module `emscripten_main_loop`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"game/src/main.rs","byte_start":390,"byte_end":411,"line_start":28,"line_end":28,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"render::Build!(Game);","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"render::Build!","def_site_span":{"file_name":"/home/oleg/Documents/dev/galaga/src/render/src/window_instance.rs","byte_start":88,"byte_end":2022,"line_start":7,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! Build {","highlight_start":1,"highlight_end":21},{"text":"    ($type_name:ty) => {","highlight_start":1,"highlight_end":25},{"text":"        struct WindowInstance {","highlight_start":1,"highlight_end":32},{"text":"            this : *mut WindowInstance,","highlight_start":1,"highlight_end":40},{"text":"            sdl  : window::SDLContext,","highlight_start":1,"highlight_end":39},{"text":"         //   instance : type_name,","highlight_start":1,"highlight_end":36},{"text":"            _pin : PhantomPinned,","highlight_start":1,"highlight_end":34},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl WindowInstance{","highlight_start":1,"highlight_end":29},{"text":"            fn OnFrame(&mut self){","highlight_start":1,"highlight_end":35},{"text":"                unsafe{","highlight_start":1,"highlight_end":24},{"text":"                    //self.sdl.update(mut self.this, mut self.this);","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        struct Window{","highlight_start":1,"highlight_end":23},{"text":"            instance : Pin<Box<WindowInstance>>,","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl Window{","highlight_start":1,"highlight_end":21},{"text":"            fn new() -> Self{","highlight_start":1,"highlight_end":30},{"text":"                let mut instance : WindowInstance = WindowInstance{","highlight_start":1,"highlight_end":68},{"text":"                    this : std::ptr::null_mut(),","highlight_start":1,"highlight_end":49},{"text":"                    sdl  : window::SDLContext::new(),","highlight_start":1,"highlight_end":54},{"text":"           //        instance : type_name::new(),","highlight_start":1,"highlight_end":50},{"text":"                    _pin : PhantomPinned,","highlight_start":1,"highlight_end":42},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut boxed = Box::pin(instance);","highlight_start":1,"highlight_end":52},{"text":"                unsafe{","highlight_start":1,"highlight_end":24},{"text":"                    let mut_ref = Pin::as_mut(&mut boxed);","highlight_start":1,"highlight_end":59},{"text":"                    let ptr = Pin::get_unchecked_mut(mut_ref);","highlight_start":1,"highlight_end":63},{"text":"                    (*ptr).this = ptr;","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                return Self{","highlight_start":1,"highlight_end":29},{"text":"                    instance : boxed","highlight_start":1,"highlight_end":37},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn Display(&mut self){","highlight_start":1,"highlight_end":35},{"text":"                emscripten_main_loop::run( self );","highlight_start":1,"highlight_end":51},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn Instance(&mut self) -> &mut WindowInstance{","highlight_start":1,"highlight_end":59},{"text":"                unsafe{","highlight_start":1,"highlight_end":24},{"text":"                    let mut_ref = Pin::as_mut(&mut self.instance);","highlight_start":1,"highlight_end":67},{"text":"                    let ptr  = Pin::get_unchecked_mut(mut_ref);","highlight_start":1,"highlight_end":64},{"text":"                    return ptr;","highlight_start":1,"highlight_end":32},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl emscripten_main_loop::MainLoop for WindowInstance {","highlight_start":1,"highlight_end":65},{"text":"            fn main_loop(&mut self) -> emscripten_main_loop::MainLoopEvent {","highlight_start":1,"highlight_end":77},{"text":"                self.Instance().OnFrame();","highlight_start":1,"highlight_end":43},{"text":"                return emscripten_main_loop::MainLoopEvent::Continue;     ","highlight_start":1,"highlight_end":75},{"text":"            }       ","highlight_start":1,"highlight_end":21},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"   ","highlight_start":1,"highlight_end":4},{"text":"   }","highlight_start":1,"highlight_end":5},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `emscripten_main_loop`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mgame/src/main.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mrender::Build!(Game);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `emscripten_main_loop`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared crate or module `emscripten_main_loop`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/oleg/Documents/dev/galaga/src/render/src/window_instance.rs","byte_start":1825,"byte_end":1845,"line_start":63,"line_end":63,"column_start":40,"column_end":60,"is_primary":true,"text":[{"text":"            fn main_loop(&mut self) -> emscripten_main_loop::MainLoopEvent {","highlight_start":40,"highlight_end":60}],"label":"use of undeclared crate or module `emscripten_main_loop`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"game/src/main.rs","byte_start":390,"byte_end":411,"line_start":28,"line_end":28,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"render::Build!(Game);","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"render::Build!","def_site_span":{"file_name":"/home/oleg/Documents/dev/galaga/src/render/src/window_instance.rs","byte_start":88,"byte_end":2022,"line_start":7,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! Build {","highlight_start":1,"highlight_end":21},{"text":"    ($type_name:ty) => {","highlight_start":1,"highlight_end":25},{"text":"        struct WindowInstance {","highlight_start":1,"highlight_end":32},{"text":"            this : *mut WindowInstance,","highlight_start":1,"highlight_end":40},{"text":"            sdl  : window::SDLContext,","highlight_start":1,"highlight_end":39},{"text":"         //   instance : type_name,","highlight_start":1,"highlight_end":36},{"text":"            _pin : PhantomPinned,","highlight_start":1,"highlight_end":34},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl WindowInstance{","highlight_start":1,"highlight_end":29},{"text":"            fn OnFrame(&mut self){","highlight_start":1,"highlight_end":35},{"text":"                unsafe{","highlight_start":1,"highlight_end":24},{"text":"                    //self.sdl.update(mut self.this, mut self.this);","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        struct Window{","highlight_start":1,"highlight_end":23},{"text":"            instance : Pin<Box<WindowInstance>>,","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl Window{","highlight_start":1,"highlight_end":21},{"text":"            fn new() -> Self{","highlight_start":1,"highlight_end":30},{"text":"                let mut instance : WindowInstance = WindowInstance{","highlight_start":1,"highlight_end":68},{"text":"                    this : std::ptr::null_mut(),","highlight_start":1,"highlight_end":49},{"text":"                    sdl  : window::SDLContext::new(),","highlight_start":1,"highlight_end":54},{"text":"           //        instance : type_name::new(),","highlight_start":1,"highlight_end":50},{"text":"                    _pin : PhantomPinned,","highlight_start":1,"highlight_end":42},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut boxed = Box::pin(instance);","highlight_start":1,"highlight_end":52},{"text":"                unsafe{","highlight_start":1,"highlight_end":24},{"text":"                    let mut_ref = Pin::as_mut(&mut boxed);","highlight_start":1,"highlight_end":59},{"text":"                    let ptr = Pin::get_unchecked_mut(mut_ref);","highlight_start":1,"highlight_end":63},{"text":"                    (*ptr).this = ptr;","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                return Self{","highlight_start":1,"highlight_end":29},{"text":"                    instance : boxed","highlight_start":1,"highlight_end":37},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn Display(&mut self){","highlight_start":1,"highlight_end":35},{"text":"                emscripten_main_loop::run( self );","highlight_start":1,"highlight_end":51},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn Instance(&mut self) -> &mut WindowInstance{","highlight_start":1,"highlight_end":59},{"text":"                unsafe{","highlight_start":1,"highlight_end":24},{"text":"                    let mut_ref = Pin::as_mut(&mut self.instance);","highlight_start":1,"highlight_end":67},{"text":"                    let ptr  = Pin::get_unchecked_mut(mut_ref);","highlight_start":1,"highlight_end":64},{"text":"                    return ptr;","highlight_start":1,"highlight_end":32},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl emscripten_main_loop::MainLoop for WindowInstance {","highlight_start":1,"highlight_end":65},{"text":"            fn main_loop(&mut self) -> emscripten_main_loop::MainLoopEvent {","highlight_start":1,"highlight_end":77},{"text":"                self.Instance().OnFrame();","highlight_start":1,"highlight_end":43},{"text":"                return emscripten_main_loop::MainLoopEvent::Continue;     ","highlight_start":1,"highlight_end":75},{"text":"            }       ","highlight_start":1,"highlight_end":21},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"   ","highlight_start":1,"highlight_end":4},{"text":"   }","highlight_start":1,"highlight_end":5},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `emscripten_main_loop`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mgame/src/main.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mrender::Build!(Game);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `emscripten_main_loop`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared crate or module `emscripten_main_loop`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/oleg/Documents/dev/galaga/src/render/src/window_instance.rs","byte_start":1929,"byte_end":1949,"line_start":65,"line_end":65,"column_start":24,"column_end":44,"is_primary":true,"text":[{"text":"                return emscripten_main_loop::MainLoopEvent::Continue;     ","highlight_start":24,"highlight_end":44}],"label":"use of undeclared crate or module `emscripten_main_loop`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"game/src/main.rs","byte_start":390,"byte_end":411,"line_start":28,"line_end":28,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"render::Build!(Game);","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"render::Build!","def_site_span":{"file_name":"/home/oleg/Documents/dev/galaga/src/render/src/window_instance.rs","byte_start":88,"byte_end":2022,"line_start":7,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! Build {","highlight_start":1,"highlight_end":21},{"text":"    ($type_name:ty) => {","highlight_start":1,"highlight_end":25},{"text":"        struct WindowInstance {","highlight_start":1,"highlight_end":32},{"text":"            this : *mut WindowInstance,","highlight_start":1,"highlight_end":40},{"text":"            sdl  : window::SDLContext,","highlight_start":1,"highlight_end":39},{"text":"         //   instance : type_name,","highlight_start":1,"highlight_end":36},{"text":"            _pin : PhantomPinned,","highlight_start":1,"highlight_end":34},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl WindowInstance{","highlight_start":1,"highlight_end":29},{"text":"            fn OnFrame(&mut self){","highlight_start":1,"highlight_end":35},{"text":"                unsafe{","highlight_start":1,"highlight_end":24},{"text":"                    //self.sdl.update(mut self.this, mut self.this);","highlight_start":1,"highlight_end":69},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        struct Window{","highlight_start":1,"highlight_end":23},{"text":"            instance : Pin<Box<WindowInstance>>,","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl Window{","highlight_start":1,"highlight_end":21},{"text":"            fn new() -> Self{","highlight_start":1,"highlight_end":30},{"text":"                let mut instance : WindowInstance = WindowInstance{","highlight_start":1,"highlight_end":68},{"text":"                    this : std::ptr::null_mut(),","highlight_start":1,"highlight_end":49},{"text":"                    sdl  : window::SDLContext::new(),","highlight_start":1,"highlight_end":54},{"text":"           //        instance : type_name::new(),","highlight_start":1,"highlight_end":50},{"text":"                    _pin : PhantomPinned,","highlight_start":1,"highlight_end":42},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let mut boxed = Box::pin(instance);","highlight_start":1,"highlight_end":52},{"text":"                unsafe{","highlight_start":1,"highlight_end":24},{"text":"                    let mut_ref = Pin::as_mut(&mut boxed);","highlight_start":1,"highlight_end":59},{"text":"                    let ptr = Pin::get_unchecked_mut(mut_ref);","highlight_start":1,"highlight_end":63},{"text":"                    (*ptr).this = ptr;","highlight_start":1,"highlight_end":39},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                return Self{","highlight_start":1,"highlight_end":29},{"text":"                    instance : boxed","highlight_start":1,"highlight_end":37},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn Display(&mut self){","highlight_start":1,"highlight_end":35},{"text":"                emscripten_main_loop::run( self );","highlight_start":1,"highlight_end":51},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn Instance(&mut self) -> &mut WindowInstance{","highlight_start":1,"highlight_end":59},{"text":"                unsafe{","highlight_start":1,"highlight_end":24},{"text":"                    let mut_ref = Pin::as_mut(&mut self.instance);","highlight_start":1,"highlight_end":67},{"text":"                    let ptr  = Pin::get_unchecked_mut(mut_ref);","highlight_start":1,"highlight_end":64},{"text":"                    return ptr;","highlight_start":1,"highlight_end":32},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl emscripten_main_loop::MainLoop for WindowInstance {","highlight_start":1,"highlight_end":65},{"text":"            fn main_loop(&mut self) -> emscripten_main_loop::MainLoopEvent {","highlight_start":1,"highlight_end":77},{"text":"                self.Instance().OnFrame();","highlight_start":1,"highlight_end":43},{"text":"                return emscripten_main_loop::MainLoopEvent::Continue;     ","highlight_start":1,"highlight_end":75},{"text":"            }       ","highlight_start":1,"highlight_end":21},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"   ","highlight_start":1,"highlight_end":4},{"text":"   }","highlight_start":1,"highlight_end":5},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `emscripten_main_loop`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mgame/src/main.rs:28:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mrender::Build!(Game);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `emscripten_main_loop`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unused import: `sdl2::event::Event`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"game/src/main.rs","byte_start":36,"byte_end":54,"line_start":3,"line_end":3,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use sdl2::event::Event;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"game/src/main.rs","byte_start":32,"byte_end":55,"line_start":3,"line_end":3,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"use sdl2::event::Event;","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `sdl2::event::Event`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mgame/src/main.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse sdl2::event::Event;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"aborting due to 4 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0433`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0433`.\u001b[0m\n"}
